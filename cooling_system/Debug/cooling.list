
cooling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800374c  0800374c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800374c  0800374c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003750  08003750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08003754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001dc  08003930  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003930  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066f7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000168d  00000000  00000000  000268fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001778b  00000000  00000000  00028c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006557  00000000  00000000  000403c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082d75  00000000  00000000  0004691a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c968f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002524  00000000  00000000  000c970c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	080034c4 	.word	0x080034c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	080034c4 	.word	0x080034c4

0800014c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b35      	ldr	r3, [pc, #212]	; (8000238 <MX_GPIO_Init+0xec>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a34      	ldr	r2, [pc, #208]	; (8000238 <MX_GPIO_Init+0xec>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b32      	ldr	r3, [pc, #200]	; (8000238 <MX_GPIO_Init+0xec>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <MX_GPIO_Init+0xec>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2e      	ldr	r2, [pc, #184]	; (8000238 <MX_GPIO_Init+0xec>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2c      	ldr	r3, [pc, #176]	; (8000238 <MX_GPIO_Init+0xec>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000190:	4b29      	ldr	r3, [pc, #164]	; (8000238 <MX_GPIO_Init+0xec>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a28      	ldr	r2, [pc, #160]	; (8000238 <MX_GPIO_Init+0xec>)
 8000196:	f043 0310 	orr.w	r3, r3, #16
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b26      	ldr	r3, [pc, #152]	; (8000238 <MX_GPIO_Init+0xec>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0310 	and.w	r3, r3, #16
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ae:	4823      	ldr	r0, [pc, #140]	; (800023c <MX_GPIO_Init+0xf0>)
 80001b0:	f000 fdb7 	bl	8000d22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, red_led_Pin|blue_led_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80001ba:	4821      	ldr	r0, [pc, #132]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001bc:	f000 fdb1 	bl	8000d22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = green_led_Pin;
 80001c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(green_led_GPIO_Port, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	4818      	ldr	r0, [pc, #96]	; (800023c <MX_GPIO_Init+0xf0>)
 80001da:	f000 fc31 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btn_dust_Pin;
 80001de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_dust_GPIO_Port, &GPIO_InitStruct);
 80001ec:	f107 0310 	add.w	r3, r7, #16
 80001f0:	4619      	mov	r1, r3
 80001f2:	4812      	ldr	r0, [pc, #72]	; (800023c <MX_GPIO_Init+0xf0>)
 80001f4:	f000 fc24 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = red_led_Pin|blue_led_Pin;
 80001f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80001fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000202:	2300      	movs	r3, #0
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000206:	2302      	movs	r3, #2
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	480b      	ldr	r0, [pc, #44]	; (8000240 <MX_GPIO_Init+0xf4>)
 8000212:	f000 fc15 	bl	8000a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = btn_up_Pin|btn_down_Pin;
 8000216:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800021a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800021c:	2300      	movs	r3, #0
 800021e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000220:	2301      	movs	r3, #1
 8000222:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	4806      	ldr	r0, [pc, #24]	; (8000244 <MX_GPIO_Init+0xf8>)
 800022c:	f000 fc08 	bl	8000a40 <HAL_GPIO_Init>

}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000
 800023c:	40010c00 	.word	0x40010c00
 8000240:	40011000 	.word	0x40011000
 8000244:	40010800 	.word	0x40010800

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b088      	sub	sp, #32
 800024c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024e:	f000 fa8f 	bl	8000770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f8bb 	bl	80003cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f7ff ff79 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f9ef 	bl	800063c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint8_t buf[10] = "\n\r";
 800025e:	f640 530a 	movw	r3, #3338	; 0xd0a
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	809a      	strh	r2, [r3, #4]
  	uint8_t current_temp = 20;
 800026e:	2314      	movs	r3, #20
 8000270:	75fb      	strb	r3, [r7, #23]
  	uint8_t dust = 10;
 8000272:	230a      	movs	r3, #10
 8000274:	75bb      	strb	r3, [r7, #22]
    uint8_t low, high;
    uint8_t up_btn_state, down_btn_state, dust_btn_state;

    printf("Input low temperature >> ");
 8000276:	484d      	ldr	r0, [pc, #308]	; (80003ac <main+0x164>)
 8000278:	f001 fc14 	bl	8001aa4 <iprintf>
    scanf("%s", buf);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	484b      	ldr	r0, [pc, #300]	; (80003b0 <main+0x168>)
 8000282:	f001 fc27 	bl	8001ad4 <iscanf>
    printf("\n\r");
 8000286:	484b      	ldr	r0, [pc, #300]	; (80003b4 <main+0x16c>)
 8000288:	f001 fc0c 	bl	8001aa4 <iprintf>
    low = (uint8_t)atoi(buf);
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fbd2 	bl	8001a38 <atoi>
 8000294:	4603      	mov	r3, r0
 8000296:	757b      	strb	r3, [r7, #21]
    printf("Input high temperature >> ");
 8000298:	4847      	ldr	r0, [pc, #284]	; (80003b8 <main+0x170>)
 800029a:	f001 fc03 	bl	8001aa4 <iprintf>
    scanf("%s", buf);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4619      	mov	r1, r3
 80002a2:	4843      	ldr	r0, [pc, #268]	; (80003b0 <main+0x168>)
 80002a4:	f001 fc16 	bl	8001ad4 <iscanf>
    printf("\n\r");
 80002a8:	4842      	ldr	r0, [pc, #264]	; (80003b4 <main+0x16c>)
 80002aa:	f001 fbfb 	bl	8001aa4 <iprintf>
    high = (uint8_t)atoi(buf);
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fbc1 	bl	8001a38 <atoi>
 80002b6:	4603      	mov	r3, r0
 80002b8:	753b      	strb	r3, [r7, #20]

    while (1)
    {
    	up_btn_state = HAL_GPIO_ReadPin(GPIOA, btn_up_Pin);
 80002ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002be:	483f      	ldr	r0, [pc, #252]	; (80003bc <main+0x174>)
 80002c0:	f000 fd18 	bl	8000cf4 <HAL_GPIO_ReadPin>
 80002c4:	4603      	mov	r3, r0
 80002c6:	74fb      	strb	r3, [r7, #19]
    	down_btn_state = HAL_GPIO_ReadPin(GPIOA, btn_down_Pin);
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	483b      	ldr	r0, [pc, #236]	; (80003bc <main+0x174>)
 80002ce:	f000 fd11 	bl	8000cf4 <HAL_GPIO_ReadPin>
 80002d2:	4603      	mov	r3, r0
 80002d4:	74bb      	strb	r3, [r7, #18]
    	dust_btn_state = HAL_GPIO_ReadPin(btn_dust_GPIO_Port, btn_dust_Pin);
 80002d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002da:	4839      	ldr	r0, [pc, #228]	; (80003c0 <main+0x178>)
 80002dc:	f000 fd0a 	bl	8000cf4 <HAL_GPIO_ReadPin>
 80002e0:	4603      	mov	r3, r0
 80002e2:	747b      	strb	r3, [r7, #17]

    	if(!up_btn_state || !down_btn_state || !dust_btn_state){
 80002e4:	7cfb      	ldrb	r3, [r7, #19]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d005      	beq.n	80002f6 <main+0xae>
 80002ea:	7cbb      	ldrb	r3, [r7, #18]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d002      	beq.n	80002f6 <main+0xae>
 80002f0:	7c7b      	ldrb	r3, [r7, #17]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d11e      	bne.n	8000334 <main+0xec>
			if(!up_btn_state){
 80002f6:	7cfb      	ldrb	r3, [r7, #19]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <main+0xba>
				current_temp++;
 80002fc:	7dfb      	ldrb	r3, [r7, #23]
 80002fe:	3301      	adds	r3, #1
 8000300:	75fb      	strb	r3, [r7, #23]
			}
			if(!down_btn_state){
 8000302:	7cbb      	ldrb	r3, [r7, #18]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d102      	bne.n	800030e <main+0xc6>
				current_temp--;
 8000308:	7dfb      	ldrb	r3, [r7, #23]
 800030a:	3b01      	subs	r3, #1
 800030c:	75fb      	strb	r3, [r7, #23]
			}
			if(!dust_btn_state){
 800030e:	7c7b      	ldrb	r3, [r7, #17]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <main+0xd2>
				dust++;
 8000314:	7dbb      	ldrb	r3, [r7, #22]
 8000316:	3301      	adds	r3, #1
 8000318:	75bb      	strb	r3, [r7, #22]
			}
			printf("Current state(high/low/current/dust) : (%d/%d/%d/%d)\n\r",
 800031a:	7d39      	ldrb	r1, [r7, #20]
 800031c:	7d7a      	ldrb	r2, [r7, #21]
 800031e:	7df8      	ldrb	r0, [r7, #23]
 8000320:	7dbb      	ldrb	r3, [r7, #22]
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	4603      	mov	r3, r0
 8000326:	4827      	ldr	r0, [pc, #156]	; (80003c4 <main+0x17c>)
 8000328:	f001 fbbc 	bl	8001aa4 <iprintf>
					high, low, current_temp, dust);
			HAL_Delay(300);
 800032c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000330:	f000 fa80 	bl	8000834 <HAL_Delay>
    	}

		if(current_temp <= low){
 8000334:	7dfa      	ldrb	r2, [r7, #23]
 8000336:	7d7b      	ldrb	r3, [r7, #21]
 8000338:	429a      	cmp	r2, r3
 800033a:	d80b      	bhi.n	8000354 <main+0x10c>
			HAL_GPIO_WritePin(GPIOC, red_led_Pin, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	4821      	ldr	r0, [pc, #132]	; (80003c8 <main+0x180>)
 8000342:	f000 fcee 	bl	8000d22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, blue_led_Pin, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034c:	481e      	ldr	r0, [pc, #120]	; (80003c8 <main+0x180>)
 800034e:	f000 fce8 	bl	8000d22 <HAL_GPIO_WritePin>
 8000352:	e01a      	b.n	800038a <main+0x142>
		}
		else if(current_temp >= high){
 8000354:	7dfa      	ldrb	r2, [r7, #23]
 8000356:	7d3b      	ldrb	r3, [r7, #20]
 8000358:	429a      	cmp	r2, r3
 800035a:	d30b      	bcc.n	8000374 <main+0x12c>
			HAL_GPIO_WritePin(GPIOC, red_led_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	2140      	movs	r1, #64	; 0x40
 8000360:	4819      	ldr	r0, [pc, #100]	; (80003c8 <main+0x180>)
 8000362:	f000 fcde 	bl	8000d22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, blue_led_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036c:	4816      	ldr	r0, [pc, #88]	; (80003c8 <main+0x180>)
 800036e:	f000 fcd8 	bl	8000d22 <HAL_GPIO_WritePin>
 8000372:	e00a      	b.n	800038a <main+0x142>
		}
		else{
			HAL_GPIO_WritePin(GPIOC, red_led_Pin, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4813      	ldr	r0, [pc, #76]	; (80003c8 <main+0x180>)
 800037a:	f000 fcd2 	bl	8000d22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, blue_led_Pin, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000384:	4810      	ldr	r0, [pc, #64]	; (80003c8 <main+0x180>)
 8000386:	f000 fccc 	bl	8000d22 <HAL_GPIO_WritePin>
		}
		if(dust <= 20){
 800038a:	7dbb      	ldrb	r3, [r7, #22]
 800038c:	2b14      	cmp	r3, #20
 800038e:	d806      	bhi.n	800039e <main+0x156>
			HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 1);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000396:	480a      	ldr	r0, [pc, #40]	; (80003c0 <main+0x178>)
 8000398:	f000 fcc3 	bl	8000d22 <HAL_GPIO_WritePin>
 800039c:	e78d      	b.n	80002ba <main+0x72>
		}
		else{
			HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 800039e:	2200      	movs	r2, #0
 80003a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <main+0x178>)
 80003a6:	f000 fcbc 	bl	8000d22 <HAL_GPIO_WritePin>
    	up_btn_state = HAL_GPIO_ReadPin(GPIOA, btn_up_Pin);
 80003aa:	e786      	b.n	80002ba <main+0x72>
 80003ac:	080034dc 	.word	0x080034dc
 80003b0:	080034f8 	.word	0x080034f8
 80003b4:	080034fc 	.word	0x080034fc
 80003b8:	08003500 	.word	0x08003500
 80003bc:	40010800 	.word	0x40010800
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	0800351c 	.word	0x0800351c
 80003c8:	40011000 	.word	0x40011000

080003cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b090      	sub	sp, #64	; 0x40
 80003d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d2:	f107 0318 	add.w	r3, r7, #24
 80003d6:	2228      	movs	r2, #40	; 0x28
 80003d8:	2100      	movs	r1, #0
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 fb5a 	bl	8001a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	2310      	movs	r3, #16
 80003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fca6 	bl	8000d54 <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800040e:	f000 f847 	bl	80004a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f000 ff12 	bl	8001254 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000436:	f000 f833 	bl	80004a0 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3740      	adds	r7, #64	; 0x40
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <_read>:

/* USER CODE BEGIN 4 */
int _read(int file, char *ptr, int len){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (uint8_t *)ptr, 1, 0xFFFF);
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	2201      	movs	r2, #1
 8000456:	68b9      	ldr	r1, [r7, #8]
 8000458:	4806      	ldr	r0, [pc, #24]	; (8000474 <_read+0x30>)
 800045a:	f001 f976 	bl	800174a <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, 1, 100);
 800045e:	2364      	movs	r3, #100	; 0x64
 8000460:	2201      	movs	r2, #1
 8000462:	68b9      	ldr	r1, [r7, #8]
 8000464:	4803      	ldr	r0, [pc, #12]	; (8000474 <_read+0x30>)
 8000466:	f001 f8de 	bl	8001626 <HAL_UART_Transmit>
	return 1;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000204 	.word	0x20000204

08000478 <_write>:

int _write(int file, char *ptr, int len){
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	b29a      	uxth	r2, r3
 8000488:	2364      	movs	r3, #100	; 0x64
 800048a:	68b9      	ldr	r1, [r7, #8]
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <_write+0x24>)
 800048e:	f001 f8ca 	bl	8001626 <HAL_UART_Transmit>
	return len;
 8000492:	687b      	ldr	r3, [r7, #4]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000204 	.word	0x20000204

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_MspInit+0x5c>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x5c>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_MspInit+0x60>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_MspInit+0x60>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000
 800050c:	40010000 	.word	0x40010000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <HardFault_Handler+0x4>

08000522 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <BusFault_Handler+0x4>

0800052e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f94e 	bl	80007fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	return -1;
 800056c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800058a:	605a      	str	r2, [r3, #4]
	return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <_isatty>:

int _isatty(int file)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	return 1;
 80005a0:	2301      	movs	r3, #1
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <_sbrk+0x5c>)
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <_sbrk+0x60>)
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <_sbrk+0x64>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d102      	bne.n	80005e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <_sbrk+0x64>)
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <_sbrk+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d207      	bcs.n	8000604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f4:	f001 fa24 	bl	8001a40 <__errno>
 80005f8:	4602      	mov	r2, r0
 80005fa:	230c      	movs	r3, #12
 80005fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	e009      	b.n	8000618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <_sbrk+0x64>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <_sbrk+0x64>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	4a05      	ldr	r2, [pc, #20]	; (8000628 <_sbrk+0x64>)
 8000614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000616:	68fb      	ldr	r3, [r7, #12]
}
 8000618:	4618      	mov	r0, r3
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20005000 	.word	0x20005000
 8000624:	00000400 	.word	0x00000400
 8000628:	200001f8 	.word	0x200001f8
 800062c:	20000250 	.word	0x20000250

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000642:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_USART2_UART_Init+0x50>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_USART2_UART_Init+0x4c>)
 8000674:	f000 ff8a 	bl	800158c <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067e:	f7ff ff0f 	bl	80004a0 <Error_Handler>
  }

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000204 	.word	0x20000204
 800068c:	40004400 	.word	0x40004400

08000690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <HAL_UART_MspInit+0x88>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d12f      	bne.n	8000710 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ba:	61d3      	str	r3, [r2, #28]
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a13      	ldr	r2, [pc, #76]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_UART_MspInit+0x8c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e0:	2304      	movs	r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <HAL_UART_MspInit+0x90>)
 80006f4:	f000 f9a4 	bl	8000a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f8:	2308      	movs	r3, #8
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_UART_MspInit+0x90>)
 800070c:	f000 f998 	bl	8000a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40004400 	.word	0x40004400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000724:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000726:	e003      	b.n	8000730 <LoopCopyDataInit>

08000728 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800072a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800072c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800072e:	3104      	adds	r1, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000734:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000736:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000738:	d3f6      	bcc.n	8000728 <CopyDataInit>
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800073c:	e002      	b.n	8000744 <LoopFillZerobss>

0800073e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000740:	f842 3b04 	str.w	r3, [r2], #4

08000744 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000744:	4b08      	ldr	r3, [pc, #32]	; (8000768 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000746:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000748:	d3f9      	bcc.n	800073e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800074a:	f7ff ff71 	bl	8000630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f001 f97d 	bl	8001a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000752:	f7ff fd79 	bl	8000248 <main>
  bx lr
 8000756:	4770      	bx	lr
  ldr r3, =_sidata
 8000758:	08003754 	.word	0x08003754
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000760:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000764:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000768:	2000024c 	.word	0x2000024c

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x28>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f929 	bl	80009d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fe8e 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f933 	bl	8000a26 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f000 f909 	bl	80009ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a03      	ldr	r2, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	20000008 	.word	0x20000008
 800081c:	20000244 	.word	0x20000244

08000820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	20000244 	.word	0x20000244

08000834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff fff0 	bl	8000820 <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_Delay+0x40>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085a:	bf00      	nop
 800085c:	f7ff ffe0 	bl	8000820 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000008 	.word	0x20000008

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db0a      	blt.n	8000906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	490c      	ldr	r1, [pc, #48]	; (8000928 <__NVIC_SetPriority+0x4c>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	0112      	lsls	r2, r2, #4
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	440b      	add	r3, r1
 8000900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000904:	e00a      	b.n	800091c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4908      	ldr	r1, [pc, #32]	; (800092c <__NVIC_SetPriority+0x50>)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	f003 030f 	and.w	r3, r3, #15
 8000912:	3b04      	subs	r3, #4
 8000914:	0112      	lsls	r2, r2, #4
 8000916:	b2d2      	uxtb	r2, r2
 8000918:	440b      	add	r3, r1
 800091a:	761a      	strb	r2, [r3, #24]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000e100 	.word	0xe000e100
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000930:	b480      	push	{r7}
 8000932:	b089      	sub	sp, #36	; 0x24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f1c3 0307 	rsb	r3, r3, #7
 800094a:	2b04      	cmp	r3, #4
 800094c:	bf28      	it	cs
 800094e:	2304      	movcs	r3, #4
 8000950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3304      	adds	r3, #4
 8000956:	2b06      	cmp	r3, #6
 8000958:	d902      	bls.n	8000960 <NVIC_EncodePriority+0x30>
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	3b03      	subs	r3, #3
 800095e:	e000      	b.n	8000962 <NVIC_EncodePriority+0x32>
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	f04f 32ff 	mov.w	r2, #4294967295
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43da      	mvns	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000978:	f04f 31ff 	mov.w	r1, #4294967295
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43d9      	mvns	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	4313      	orrs	r3, r2
         );
}
 800098a:	4618      	mov	r0, r3
 800098c:	3724      	adds	r7, #36	; 0x24
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a4:	d301      	bcc.n	80009aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00f      	b.n	80009ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <SysTick_Config+0x40>)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b2:	210f      	movs	r1, #15
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff ff90 	bl	80008dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <SysTick_Config+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <SysTick_Config+0x40>)
 80009c4:	2207      	movs	r2, #7
 80009c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	e000e010 	.word	0xe000e010

080009d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff49 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b086      	sub	sp, #24
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a00:	f7ff ff5e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	6978      	ldr	r0, [r7, #20]
 8000a0c:	f7ff ff90 	bl	8000930 <NVIC_EncodePriority>
 8000a10:	4602      	mov	r2, r0
 8000a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff5f 	bl	80008dc <__NVIC_SetPriority>
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffb0 	bl	8000994 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b08b      	sub	sp, #44	; 0x2c
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a52:	e127      	b.n	8000ca4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a54:	2201      	movs	r2, #1
 8000a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f040 8116 	bne.w	8000c9e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	2b12      	cmp	r3, #18
 8000a78:	d034      	beq.n	8000ae4 <HAL_GPIO_Init+0xa4>
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d80d      	bhi.n	8000a9a <HAL_GPIO_Init+0x5a>
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d02b      	beq.n	8000ada <HAL_GPIO_Init+0x9a>
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d804      	bhi.n	8000a90 <HAL_GPIO_Init+0x50>
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d031      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d01c      	beq.n	8000ac8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e048      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d043      	beq.n	8000b1c <HAL_GPIO_Init+0xdc>
 8000a94:	2b11      	cmp	r3, #17
 8000a96:	d01b      	beq.n	8000ad0 <HAL_GPIO_Init+0x90>
          break;
 8000a98:	e043      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a9a:	4a89      	ldr	r2, [pc, #548]	; (8000cc0 <HAL_GPIO_Init+0x280>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d026      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aa0:	4a87      	ldr	r2, [pc, #540]	; (8000cc0 <HAL_GPIO_Init+0x280>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d806      	bhi.n	8000ab4 <HAL_GPIO_Init+0x74>
 8000aa6:	4a87      	ldr	r2, [pc, #540]	; (8000cc4 <HAL_GPIO_Init+0x284>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d020      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aac:	4a86      	ldr	r2, [pc, #536]	; (8000cc8 <HAL_GPIO_Init+0x288>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d01d      	beq.n	8000aee <HAL_GPIO_Init+0xae>
          break;
 8000ab2:	e036      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab4:	4a85      	ldr	r2, [pc, #532]	; (8000ccc <HAL_GPIO_Init+0x28c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d019      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000aba:	4a85      	ldr	r2, [pc, #532]	; (8000cd0 <HAL_GPIO_Init+0x290>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d016      	beq.n	8000aee <HAL_GPIO_Init+0xae>
 8000ac0:	4a84      	ldr	r2, [pc, #528]	; (8000cd4 <HAL_GPIO_Init+0x294>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d013      	beq.n	8000aee <HAL_GPIO_Init+0xae>
          break;
 8000ac6:	e02c      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e028      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e023      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	623b      	str	r3, [r7, #32]
          break;
 8000ae2:	e01e      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e019      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000af6:	2304      	movs	r3, #4
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e012      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d105      	bne.n	8000b10 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b04:	2308      	movs	r3, #8
 8000b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	611a      	str	r2, [r3, #16]
          break;
 8000b0e:	e008      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b10:	2308      	movs	r3, #8
 8000b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	615a      	str	r2, [r3, #20]
          break;
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
          break;
 8000b20:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	d801      	bhi.n	8000b2c <HAL_GPIO_Init+0xec>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	e001      	b.n	8000b30 <HAL_GPIO_Init+0xf0>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2bff      	cmp	r3, #255	; 0xff
 8000b36:	d802      	bhi.n	8000b3e <HAL_GPIO_Init+0xfe>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x104>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	3b08      	subs	r3, #8
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	401a      	ands	r2, r3
 8000b56:	6a39      	ldr	r1, [r7, #32]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	f000 8096 	beq.w	8000c9e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b72:	4b59      	ldr	r3, [pc, #356]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a58      	ldr	r2, [pc, #352]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6193      	str	r3, [r2, #24]
 8000b7e:	4b56      	ldr	r3, [pc, #344]	; (8000cd8 <HAL_GPIO_Init+0x298>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b8a:	4a54      	ldr	r2, [pc, #336]	; (8000cdc <HAL_GPIO_Init+0x29c>)
 8000b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3302      	adds	r3, #2
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	f003 0303 	and.w	r3, r3, #3
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <HAL_GPIO_Init+0x2a0>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d013      	beq.n	8000bde <HAL_GPIO_Init+0x19e>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a4a      	ldr	r2, [pc, #296]	; (8000ce4 <HAL_GPIO_Init+0x2a4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d00d      	beq.n	8000bda <HAL_GPIO_Init+0x19a>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a49      	ldr	r2, [pc, #292]	; (8000ce8 <HAL_GPIO_Init+0x2a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d007      	beq.n	8000bd6 <HAL_GPIO_Init+0x196>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a48      	ldr	r2, [pc, #288]	; (8000cec <HAL_GPIO_Init+0x2ac>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d101      	bne.n	8000bd2 <HAL_GPIO_Init+0x192>
 8000bce:	2303      	movs	r3, #3
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	e004      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e000      	b.n	8000be0 <HAL_GPIO_Init+0x1a0>
 8000bde:	2300      	movs	r3, #0
 8000be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be2:	f002 0203 	and.w	r2, r2, #3
 8000be6:	0092      	lsls	r2, r2, #2
 8000be8:	4093      	lsls	r3, r2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf0:	493a      	ldr	r1, [pc, #232]	; (8000cdc <HAL_GPIO_Init+0x29c>)
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4938      	ldr	r1, [pc, #224]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
 8000c16:	e006      	b.n	8000c26 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4933      	ldr	r1, [pc, #204]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	492e      	ldr	r1, [pc, #184]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	604b      	str	r3, [r1, #4]
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4929      	ldr	r1, [pc, #164]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d006      	beq.n	8000c68 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4924      	ldr	r1, [pc, #144]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	608b      	str	r3, [r1, #8]
 8000c66:	e006      	b.n	8000c76 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	689a      	ldr	r2, [r3, #8]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	491f      	ldr	r1, [pc, #124]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c72:	4013      	ands	r3, r2
 8000c74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	491a      	ldr	r1, [pc, #104]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60cb      	str	r3, [r1, #12]
 8000c8e:	e006      	b.n	8000c9e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4915      	ldr	r1, [pc, #84]	; (8000cf0 <HAL_GPIO_Init+0x2b0>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f47f aed0 	bne.w	8000a54 <HAL_GPIO_Init+0x14>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	372c      	adds	r7, #44	; 0x2c
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	10210000 	.word	0x10210000
 8000cc4:	10110000 	.word	0x10110000
 8000cc8:	10120000 	.word	0x10120000
 8000ccc:	10310000 	.word	0x10310000
 8000cd0:	10320000 	.word	0x10320000
 8000cd4:	10220000 	.word	0x10220000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40011400 	.word	0x40011400
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e001      	b.n	8000d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d12:	2300      	movs	r3, #0
 8000d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	807b      	strh	r3, [r7, #2]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d32:	787b      	ldrb	r3, [r7, #1]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d38:	887a      	ldrh	r2, [r7, #2]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d3e:	e003      	b.n	8000d48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	041a      	lsls	r2, r3, #16
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e26c      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8087 	beq.w	8000e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d74:	4b92      	ldr	r3, [pc, #584]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4b8f      	ldr	r3, [pc, #572]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d112      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
 8000d8c:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d10b      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d06c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x12c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d168      	bne.n	8000e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e246      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dba:	d106      	bne.n	8000dca <HAL_RCC_OscConfig+0x76>
 8000dbc:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7f      	ldr	r2, [pc, #508]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e02e      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x98>
 8000dd2:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a77      	ldr	r2, [pc, #476]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01d      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0xbc>
 8000df6:	4b72      	ldr	r3, [pc, #456]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a71      	ldr	r2, [pc, #452]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6e      	ldr	r2, [pc, #440]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000e10:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b68      	ldr	r3, [pc, #416]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a67      	ldr	r2, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fcf6 	bl	8000820 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fcf2 	bl	8000820 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e1fa      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0xe4>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fce2 	bl	8000820 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fcde 	bl	8000820 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e1e6      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x10c>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d063      	beq.n	8000f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e1ba      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4939      	ldr	r1, [pc, #228]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	e03a      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc97 	bl	8000820 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fc93 	bl	8000820 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e19b      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4927      	ldr	r1, [pc, #156]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e015      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc76 	bl	8000820 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc72 	bl	8000820 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e17a      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d03a      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d019      	beq.n	8000f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fc56 	bl	8000820 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc52 	bl	8000820 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e15a      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 fada 	bl	8001550 <RCC_Delay>
 8000f9c:	e01c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fc3c 	bl	8000820 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	e00f      	b.n	8000fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fac:	f7ff fc38 	bl	8000820 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d908      	bls.n	8000fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e140      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	42420000 	.word	0x42420000
 8000fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	4b9e      	ldr	r3, [pc, #632]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e9      	bne.n	8000fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a6 	beq.w	8001132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fea:	4b97      	ldr	r3, [pc, #604]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10d      	bne.n	8001012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b94      	ldr	r3, [pc, #592]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a93      	ldr	r2, [pc, #588]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b91      	ldr	r3, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b8e      	ldr	r3, [pc, #568]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b8b      	ldr	r3, [pc, #556]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a8a      	ldr	r2, [pc, #552]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fbf9 	bl	8000820 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001032:	f7ff fbf5 	bl	8000820 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e0fd      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	4b81      	ldr	r3, [pc, #516]	; (800124c <HAL_RCC_OscConfig+0x4f8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x312>
 8001058:	4b7b      	ldr	r3, [pc, #492]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e02d      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x334>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b73      	ldr	r3, [pc, #460]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a72      	ldr	r2, [pc, #456]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	e01c      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x356>
 8001090:	4b6d      	ldr	r3, [pc, #436]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a6c      	ldr	r2, [pc, #432]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	4b6a      	ldr	r3, [pc, #424]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a69      	ldr	r2, [pc, #420]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 80010aa:	4b67      	ldr	r3, [pc, #412]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a66      	ldr	r2, [pc, #408]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b64      	ldr	r3, [pc, #400]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a63      	ldr	r2, [pc, #396]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d015      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fba9 	bl	8000820 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff fba5 	bl	8000820 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e0ab      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	4b57      	ldr	r3, [pc, #348]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0ee      	beq.n	80010d2 <HAL_RCC_OscConfig+0x37e>
 80010f4:	e014      	b.n	8001120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fb93 	bl	8000820 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fb8f 	bl	8000820 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e095      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ee      	bne.n	80010fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d105      	bne.n	8001132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001126:	4b48      	ldr	r3, [pc, #288]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800112c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8081 	beq.w	800123e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800113c:	4b42      	ldr	r3, [pc, #264]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d061      	beq.n	800120c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d146      	bne.n	80011de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fb63 	bl	8000820 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fb5f 	bl	8000820 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e067      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	4b35      	ldr	r3, [pc, #212]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d108      	bne.n	8001198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	492d      	ldr	r1, [pc, #180]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a19      	ldr	r1, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	430b      	orrs	r3, r1
 80011aa:	4927      	ldr	r1, [pc, #156]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fb33 	bl	8000820 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff fb2f 	bl	8000820 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e037      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x46a>
 80011dc:	e02f      	b.n	800123e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <HAL_RCC_OscConfig+0x4fc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb1c 	bl	8000820 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fb18 	bl	8000820 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e020      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x498>
 800120a:	e018      	b.n	800123e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e013      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	429a      	cmp	r2, r3
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000
 800124c:	40007000 	.word	0x40007000
 8001250:	42420060 	.word	0x42420060

08001254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d0      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b6a      	ldr	r3, [pc, #424]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d910      	bls.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4965      	ldr	r1, [pc, #404]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e073      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b39      	ldr	r3, [pc, #228]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4936      	ldr	r1, [pc, #216]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fa6c 	bl	8000820 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fa68 	bl	8000820 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e053      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d210      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4922      	ldr	r1, [pc, #136]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4601      	mov	r1, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	fa21 f303 	lsr.w	r3, r1, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_ClockConfig+0x1cc>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f9ca 	bl	800079c <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	08003574 	.word	0x08003574
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b490      	push	{r4, r7}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001430:	1d3c      	adds	r4, r7, #4
 8001432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 030c 	and.w	r3, r3, #12
 800145e:	2b04      	cmp	r3, #4
 8001460:	d002      	beq.n	8001468 <HAL_RCC_GetSysClockFreq+0x40>
 8001462:	2b08      	cmp	r3, #8
 8001464:	d003      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x46>
 8001466:	e02d      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800146a:	623b      	str	r3, [r7, #32]
      break;
 800146c:	e02d      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	0c9b      	lsrs	r3, r3, #18
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800147a:	4413      	add	r3, r2
 800147c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001480:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c5b      	lsrs	r3, r3, #17
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800149a:	4413      	add	r3, r2
 800149c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014a6:	fb02 f203 	mul.w	r2, r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e004      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	623b      	str	r3, [r7, #32]
      break;
 80014c2:	e002      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014c6:	623b      	str	r3, [r7, #32]
      break;
 80014c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ca:	6a3b      	ldr	r3, [r7, #32]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc90      	pop	{r4, r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	08003554 	.word	0x08003554
 80014dc:	08003564 	.word	0x08003564
 80014e0:	40021000 	.word	0x40021000
 80014e4:	007a1200 	.word	0x007a1200
 80014e8:	003d0900 	.word	0x003d0900

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <HAL_RCC_GetHCLKFreq+0x10>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001504:	f7ff fff2 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001508:	4601      	mov	r1, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0a1b      	lsrs	r3, r3, #8
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001516:	5cd3      	ldrb	r3, [r2, r3]
 8001518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	08003584 	.word	0x08003584

08001528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800152c:	f7ff ffde 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001530:	4601      	mov	r1, r0
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	0adb      	lsrs	r3, r3, #11
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_RCC_GetPCLK2Freq+0x24>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	08003584 	.word	0x08003584

08001550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <RCC_Delay+0x34>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <RCC_Delay+0x38>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0a5b      	lsrs	r3, r3, #9
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800156c:	bf00      	nop
  }
  while (Delay --);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e5a      	subs	r2, r3, #1
 8001572:	60fa      	str	r2, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <RCC_Delay+0x1c>
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000000 	.word	0x20000000
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e03f      	b.n	800161e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff f86c 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2224      	movs	r2, #36	; 0x24
 80015bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f9a3 	bl	800191c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2220      	movs	r2, #32
 8001610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b08a      	sub	sp, #40	; 0x28
 800162a:	af02      	add	r7, sp, #8
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4613      	mov	r3, r2
 8001634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b20      	cmp	r3, #32
 8001644:	d17c      	bne.n	8001740 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_UART_Transmit+0x2c>
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e075      	b.n	8001742 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_UART_Transmit+0x3e>
 8001660:	2302      	movs	r3, #2
 8001662:	e06e      	b.n	8001742 <HAL_UART_Transmit+0x11c>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2221      	movs	r2, #33	; 0x21
 8001676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800167a:	f7ff f8d1 	bl	8000820 <HAL_GetTick>
 800167e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	88fa      	ldrh	r2, [r7, #6]
 8001684:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001694:	d108      	bne.n	80016a8 <HAL_UART_Transmit+0x82>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	e003      	b.n	80016b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80016b8:	e02a      	b.n	8001710 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2200      	movs	r2, #0
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 f8df 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e036      	b.n	8001742 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10b      	bne.n	80016f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	3302      	adds	r3, #2
 80016ee:	61bb      	str	r3, [r7, #24]
 80016f0:	e007      	b.n	8001702 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3301      	adds	r3, #1
 8001700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001706:	b29b      	uxth	r3, r3
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001714:	b29b      	uxth	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1cf      	bne.n	80016ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f8af 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e006      	b.n	8001742 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3720      	adds	r7, #32
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b08a      	sub	sp, #40	; 0x28
 800174e:	af02      	add	r7, sp, #8
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b20      	cmp	r3, #32
 8001768:	f040 8089 	bne.w	800187e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_UART_Receive+0x2e>
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e081      	b.n	8001880 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_UART_Receive+0x40>
 8001786:	2302      	movs	r3, #2
 8001788:	e07a      	b.n	8001880 <HAL_UART_Receive+0x136>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2222      	movs	r2, #34	; 0x22
 800179c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80017a0:	f7ff f83e 	bl	8000820 <HAL_GetTick>
 80017a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	88fa      	ldrh	r2, [r7, #6]
 80017b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ba:	d108      	bne.n	80017ce <HAL_UART_Receive+0x84>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d104      	bne.n	80017ce <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	e003      	b.n	80017d6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80017de:	e043      	b.n	8001868 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	2120      	movs	r1, #32
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f84c 	bl	8001888 <UART_WaitOnFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e042      	b.n	8001880 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10c      	bne.n	800181a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	b29b      	uxth	r3, r3
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	b29a      	uxth	r2, r3
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	3302      	adds	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	e01f      	b.n	800185a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001822:	d007      	beq.n	8001834 <HAL_UART_Receive+0xea>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_UART_Receive+0xf8>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d106      	bne.n	8001842 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e008      	b.n	8001854 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800184e:	b2da      	uxtb	r2, r3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	3301      	adds	r3, #1
 8001858:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800185e:	b29b      	uxth	r3, r3
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1b6      	bne.n	80017e0 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2220      	movs	r2, #32
 8001876:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800187e:	2302      	movs	r3, #2
  }
}
 8001880:	4618      	mov	r0, r3
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001898:	e02c      	b.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d028      	beq.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80018a8:	f7fe ffba 	bl	8000820 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d21d      	bcs.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80018c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2220      	movs	r2, #32
 80018e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e00f      	b.n	8001914 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	429a      	cmp	r2, r3
 8001910:	d0c3      	beq.n	800189a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001956:	f023 030c 	bic.w	r3, r3, #12
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <UART_SetConfig+0x114>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d103      	bne.n	800198c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001984:	f7ff fdd0 	bl	8001528 <HAL_RCC_GetPCLK2Freq>
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	e002      	b.n	8001992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800198c:	f7ff fdb8 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009a      	lsls	r2, r3, #2
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <UART_SetConfig+0x118>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	0119      	lsls	r1, r3, #4
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	441a      	add	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <UART_SetConfig+0x118>)
 80019ca:	fba3 0302 	umull	r0, r3, r3, r2
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2064      	movs	r0, #100	; 0x64
 80019d2:	fb00 f303 	mul.w	r3, r0, r3
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	3332      	adds	r3, #50	; 0x32
 80019dc:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <UART_SetConfig+0x118>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e8:	4419      	add	r1, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <UART_SetConfig+0x118>)
 8001a02:	fba3 0302 	umull	r0, r3, r3, r2
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	fb00 f303 	mul.w	r3, r0, r3
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	3332      	adds	r3, #50	; 0x32
 8001a14:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <UART_SetConfig+0x118>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	f003 020f 	and.w	r2, r3, #15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	440a      	add	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013800 	.word	0x40013800
 8001a34:	51eb851f 	.word	0x51eb851f

08001a38 <atoi>:
 8001a38:	220a      	movs	r2, #10
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f000 b8f0 	b.w	8001c20 <strtol>

08001a40 <__errno>:
 8001a40:	4b01      	ldr	r3, [pc, #4]	; (8001a48 <__errno+0x8>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000000c 	.word	0x2000000c

08001a4c <__libc_init_array>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	2500      	movs	r5, #0
 8001a50:	4e0c      	ldr	r6, [pc, #48]	; (8001a84 <__libc_init_array+0x38>)
 8001a52:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <__libc_init_array+0x3c>)
 8001a54:	1ba4      	subs	r4, r4, r6
 8001a56:	10a4      	asrs	r4, r4, #2
 8001a58:	42a5      	cmp	r5, r4
 8001a5a:	d109      	bne.n	8001a70 <__libc_init_array+0x24>
 8001a5c:	f001 fd32 	bl	80034c4 <_init>
 8001a60:	2500      	movs	r5, #0
 8001a62:	4e0a      	ldr	r6, [pc, #40]	; (8001a8c <__libc_init_array+0x40>)
 8001a64:	4c0a      	ldr	r4, [pc, #40]	; (8001a90 <__libc_init_array+0x44>)
 8001a66:	1ba4      	subs	r4, r4, r6
 8001a68:	10a4      	asrs	r4, r4, #2
 8001a6a:	42a5      	cmp	r5, r4
 8001a6c:	d105      	bne.n	8001a7a <__libc_init_array+0x2e>
 8001a6e:	bd70      	pop	{r4, r5, r6, pc}
 8001a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a74:	4798      	blx	r3
 8001a76:	3501      	adds	r5, #1
 8001a78:	e7ee      	b.n	8001a58 <__libc_init_array+0xc>
 8001a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a7e:	4798      	blx	r3
 8001a80:	3501      	adds	r5, #1
 8001a82:	e7f2      	b.n	8001a6a <__libc_init_array+0x1e>
 8001a84:	0800374c 	.word	0x0800374c
 8001a88:	0800374c 	.word	0x0800374c
 8001a8c:	0800374c 	.word	0x0800374c
 8001a90:	08003750 	.word	0x08003750

08001a94 <memset>:
 8001a94:	4603      	mov	r3, r0
 8001a96:	4402      	add	r2, r0
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <memset+0xa>
 8001a9c:	4770      	bx	lr
 8001a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa2:	e7f9      	b.n	8001a98 <memset+0x4>

08001aa4 <iprintf>:
 8001aa4:	b40f      	push	{r0, r1, r2, r3}
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <iprintf+0x2c>)
 8001aa8:	b513      	push	{r0, r1, r4, lr}
 8001aaa:	681c      	ldr	r4, [r3, #0]
 8001aac:	b124      	cbz	r4, 8001ab8 <iprintf+0x14>
 8001aae:	69a3      	ldr	r3, [r4, #24]
 8001ab0:	b913      	cbnz	r3, 8001ab8 <iprintf+0x14>
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f000 f90a 	bl	8001ccc <__sinit>
 8001ab8:	ab05      	add	r3, sp, #20
 8001aba:	9a04      	ldr	r2, [sp, #16]
 8001abc:	68a1      	ldr	r1, [r4, #8]
 8001abe:	4620      	mov	r0, r4
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f000 fa4f 	bl	8001f64 <_vfiprintf_r>
 8001ac6:	b002      	add	sp, #8
 8001ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001acc:	b004      	add	sp, #16
 8001ace:	4770      	bx	lr
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <iscanf>:
 8001ad4:	b40f      	push	{r0, r1, r2, r3}
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <iscanf+0x2c>)
 8001ad8:	b513      	push	{r0, r1, r4, lr}
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	b124      	cbz	r4, 8001ae8 <iscanf+0x14>
 8001ade:	69a3      	ldr	r3, [r4, #24]
 8001ae0:	b913      	cbnz	r3, 8001ae8 <iscanf+0x14>
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f000 f8f2 	bl	8001ccc <__sinit>
 8001ae8:	ab05      	add	r3, sp, #20
 8001aea:	9a04      	ldr	r2, [sp, #16]
 8001aec:	6861      	ldr	r1, [r4, #4]
 8001aee:	4620      	mov	r0, r4
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f000 fe25 	bl	8002740 <_vfiscanf_r>
 8001af6:	b002      	add	sp, #8
 8001af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001afc:	b004      	add	sp, #16
 8001afe:	4770      	bx	lr
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <_strtol_l.isra.0>:
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4680      	mov	r8, r0
 8001b0a:	4689      	mov	r9, r1
 8001b0c:	4692      	mov	sl, r2
 8001b0e:	461e      	mov	r6, r3
 8001b10:	460f      	mov	r7, r1
 8001b12:	463d      	mov	r5, r7
 8001b14:	9808      	ldr	r0, [sp, #32]
 8001b16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b1a:	f000 f97d 	bl	8001e18 <__locale_ctype_ptr_l>
 8001b1e:	4420      	add	r0, r4
 8001b20:	7843      	ldrb	r3, [r0, #1]
 8001b22:	f013 0308 	ands.w	r3, r3, #8
 8001b26:	d132      	bne.n	8001b8e <_strtol_l.isra.0+0x8a>
 8001b28:	2c2d      	cmp	r4, #45	; 0x2d
 8001b2a:	d132      	bne.n	8001b92 <_strtol_l.isra.0+0x8e>
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	787c      	ldrb	r4, [r7, #1]
 8001b30:	1cbd      	adds	r5, r7, #2
 8001b32:	2e00      	cmp	r6, #0
 8001b34:	d05d      	beq.n	8001bf2 <_strtol_l.isra.0+0xee>
 8001b36:	2e10      	cmp	r6, #16
 8001b38:	d109      	bne.n	8001b4e <_strtol_l.isra.0+0x4a>
 8001b3a:	2c30      	cmp	r4, #48	; 0x30
 8001b3c:	d107      	bne.n	8001b4e <_strtol_l.isra.0+0x4a>
 8001b3e:	782b      	ldrb	r3, [r5, #0]
 8001b40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001b44:	2b58      	cmp	r3, #88	; 0x58
 8001b46:	d14f      	bne.n	8001be8 <_strtol_l.isra.0+0xe4>
 8001b48:	2610      	movs	r6, #16
 8001b4a:	786c      	ldrb	r4, [r5, #1]
 8001b4c:	3502      	adds	r5, #2
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	bf14      	ite	ne
 8001b52:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001b56:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001b5a:	2700      	movs	r7, #0
 8001b5c:	fbb1 fcf6 	udiv	ip, r1, r6
 8001b60:	4638      	mov	r0, r7
 8001b62:	fb06 1e1c 	mls	lr, r6, ip, r1
 8001b66:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001b6a:	2b09      	cmp	r3, #9
 8001b6c:	d817      	bhi.n	8001b9e <_strtol_l.isra.0+0x9a>
 8001b6e:	461c      	mov	r4, r3
 8001b70:	42a6      	cmp	r6, r4
 8001b72:	dd23      	ble.n	8001bbc <_strtol_l.isra.0+0xb8>
 8001b74:	1c7b      	adds	r3, r7, #1
 8001b76:	d007      	beq.n	8001b88 <_strtol_l.isra.0+0x84>
 8001b78:	4584      	cmp	ip, r0
 8001b7a:	d31c      	bcc.n	8001bb6 <_strtol_l.isra.0+0xb2>
 8001b7c:	d101      	bne.n	8001b82 <_strtol_l.isra.0+0x7e>
 8001b7e:	45a6      	cmp	lr, r4
 8001b80:	db19      	blt.n	8001bb6 <_strtol_l.isra.0+0xb2>
 8001b82:	2701      	movs	r7, #1
 8001b84:	fb00 4006 	mla	r0, r0, r6, r4
 8001b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b8c:	e7eb      	b.n	8001b66 <_strtol_l.isra.0+0x62>
 8001b8e:	462f      	mov	r7, r5
 8001b90:	e7bf      	b.n	8001b12 <_strtol_l.isra.0+0xe>
 8001b92:	2c2b      	cmp	r4, #43	; 0x2b
 8001b94:	bf04      	itt	eq
 8001b96:	1cbd      	addeq	r5, r7, #2
 8001b98:	787c      	ldrbeq	r4, [r7, #1]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	e7c9      	b.n	8001b32 <_strtol_l.isra.0+0x2e>
 8001b9e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8001ba2:	2b19      	cmp	r3, #25
 8001ba4:	d801      	bhi.n	8001baa <_strtol_l.isra.0+0xa6>
 8001ba6:	3c37      	subs	r4, #55	; 0x37
 8001ba8:	e7e2      	b.n	8001b70 <_strtol_l.isra.0+0x6c>
 8001baa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001bae:	2b19      	cmp	r3, #25
 8001bb0:	d804      	bhi.n	8001bbc <_strtol_l.isra.0+0xb8>
 8001bb2:	3c57      	subs	r4, #87	; 0x57
 8001bb4:	e7dc      	b.n	8001b70 <_strtol_l.isra.0+0x6c>
 8001bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8001bba:	e7e5      	b.n	8001b88 <_strtol_l.isra.0+0x84>
 8001bbc:	1c7b      	adds	r3, r7, #1
 8001bbe:	d108      	bne.n	8001bd2 <_strtol_l.isra.0+0xce>
 8001bc0:	2322      	movs	r3, #34	; 0x22
 8001bc2:	4608      	mov	r0, r1
 8001bc4:	f8c8 3000 	str.w	r3, [r8]
 8001bc8:	f1ba 0f00 	cmp.w	sl, #0
 8001bcc:	d107      	bne.n	8001bde <_strtol_l.isra.0+0xda>
 8001bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd2:	b102      	cbz	r2, 8001bd6 <_strtol_l.isra.0+0xd2>
 8001bd4:	4240      	negs	r0, r0
 8001bd6:	f1ba 0f00 	cmp.w	sl, #0
 8001bda:	d0f8      	beq.n	8001bce <_strtol_l.isra.0+0xca>
 8001bdc:	b10f      	cbz	r7, 8001be2 <_strtol_l.isra.0+0xde>
 8001bde:	f105 39ff 	add.w	r9, r5, #4294967295
 8001be2:	f8ca 9000 	str.w	r9, [sl]
 8001be6:	e7f2      	b.n	8001bce <_strtol_l.isra.0+0xca>
 8001be8:	2430      	movs	r4, #48	; 0x30
 8001bea:	2e00      	cmp	r6, #0
 8001bec:	d1af      	bne.n	8001b4e <_strtol_l.isra.0+0x4a>
 8001bee:	2608      	movs	r6, #8
 8001bf0:	e7ad      	b.n	8001b4e <_strtol_l.isra.0+0x4a>
 8001bf2:	2c30      	cmp	r4, #48	; 0x30
 8001bf4:	d0a3      	beq.n	8001b3e <_strtol_l.isra.0+0x3a>
 8001bf6:	260a      	movs	r6, #10
 8001bf8:	e7a9      	b.n	8001b4e <_strtol_l.isra.0+0x4a>
	...

08001bfc <_strtol_r>:
 8001bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bfe:	4c06      	ldr	r4, [pc, #24]	; (8001c18 <_strtol_r+0x1c>)
 8001c00:	4d06      	ldr	r5, [pc, #24]	; (8001c1c <_strtol_r+0x20>)
 8001c02:	6824      	ldr	r4, [r4, #0]
 8001c04:	6a24      	ldr	r4, [r4, #32]
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	bf08      	it	eq
 8001c0a:	462c      	moveq	r4, r5
 8001c0c:	9400      	str	r4, [sp, #0]
 8001c0e:	f7ff ff79 	bl	8001b04 <_strtol_l.isra.0>
 8001c12:	b003      	add	sp, #12
 8001c14:	bd30      	pop	{r4, r5, pc}
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000070 	.word	0x20000070

08001c20 <strtol>:
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <strtol+0x24>)
 8001c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c24:	681c      	ldr	r4, [r3, #0]
 8001c26:	4d08      	ldr	r5, [pc, #32]	; (8001c48 <strtol+0x28>)
 8001c28:	6a23      	ldr	r3, [r4, #32]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf08      	it	eq
 8001c2e:	462b      	moveq	r3, r5
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	460a      	mov	r2, r1
 8001c36:	4601      	mov	r1, r0
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff ff63 	bl	8001b04 <_strtol_l.isra.0>
 8001c3e:	b003      	add	sp, #12
 8001c40:	bd30      	pop	{r4, r5, pc}
 8001c42:	bf00      	nop
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	20000070 	.word	0x20000070

08001c4c <std>:
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	b510      	push	{r4, lr}
 8001c50:	4604      	mov	r4, r0
 8001c52:	e9c0 3300 	strd	r3, r3, [r0]
 8001c56:	6083      	str	r3, [r0, #8]
 8001c58:	8181      	strh	r1, [r0, #12]
 8001c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8001c5c:	81c2      	strh	r2, [r0, #14]
 8001c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c62:	6183      	str	r3, [r0, #24]
 8001c64:	4619      	mov	r1, r3
 8001c66:	2208      	movs	r2, #8
 8001c68:	305c      	adds	r0, #92	; 0x5c
 8001c6a:	f7ff ff13 	bl	8001a94 <memset>
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <std+0x38>)
 8001c70:	6224      	str	r4, [r4, #32]
 8001c72:	6263      	str	r3, [r4, #36]	; 0x24
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <std+0x3c>)
 8001c76:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <std+0x40>)
 8001c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <std+0x44>)
 8001c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8001c80:	bd10      	pop	{r4, pc}
 8001c82:	bf00      	nop
 8001c84:	08002bef 	.word	0x08002bef
 8001c88:	08002c11 	.word	0x08002c11
 8001c8c:	08002c49 	.word	0x08002c49
 8001c90:	08002c6d 	.word	0x08002c6d

08001c94 <_cleanup_r>:
 8001c94:	4901      	ldr	r1, [pc, #4]	; (8001c9c <_cleanup_r+0x8>)
 8001c96:	f000 b8a1 	b.w	8001ddc <_fwalk_reent>
 8001c9a:	bf00      	nop
 8001c9c:	080031cd 	.word	0x080031cd

08001ca0 <__sfmoreglue>:
 8001ca0:	b570      	push	{r4, r5, r6, lr}
 8001ca2:	2568      	movs	r5, #104	; 0x68
 8001ca4:	1e4a      	subs	r2, r1, #1
 8001ca6:	4355      	muls	r5, r2
 8001ca8:	460e      	mov	r6, r1
 8001caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001cae:	f000 f8d7 	bl	8001e60 <_malloc_r>
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	b140      	cbz	r0, 8001cc8 <__sfmoreglue+0x28>
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8001cbc:	300c      	adds	r0, #12
 8001cbe:	60a0      	str	r0, [r4, #8]
 8001cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001cc4:	f7ff fee6 	bl	8001a94 <memset>
 8001cc8:	4620      	mov	r0, r4
 8001cca:	bd70      	pop	{r4, r5, r6, pc}

08001ccc <__sinit>:
 8001ccc:	6983      	ldr	r3, [r0, #24]
 8001cce:	b510      	push	{r4, lr}
 8001cd0:	4604      	mov	r4, r0
 8001cd2:	bb33      	cbnz	r3, 8001d22 <__sinit+0x56>
 8001cd4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001cd8:	6503      	str	r3, [r0, #80]	; 0x50
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <__sinit+0x58>)
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <__sinit+0x5c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6282      	str	r2, [r0, #40]	; 0x28
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	bf04      	itt	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	6183      	streq	r3, [r0, #24]
 8001cea:	f000 f81f 	bl	8001d2c <__sfp>
 8001cee:	6060      	str	r0, [r4, #4]
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f000 f81b 	bl	8001d2c <__sfp>
 8001cf6:	60a0      	str	r0, [r4, #8]
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f000 f817 	bl	8001d2c <__sfp>
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60e0      	str	r0, [r4, #12]
 8001d02:	2104      	movs	r1, #4
 8001d04:	6860      	ldr	r0, [r4, #4]
 8001d06:	f7ff ffa1 	bl	8001c4c <std>
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2109      	movs	r1, #9
 8001d0e:	68a0      	ldr	r0, [r4, #8]
 8001d10:	f7ff ff9c 	bl	8001c4c <std>
 8001d14:	2202      	movs	r2, #2
 8001d16:	2112      	movs	r1, #18
 8001d18:	68e0      	ldr	r0, [r4, #12]
 8001d1a:	f7ff ff97 	bl	8001c4c <std>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61a3      	str	r3, [r4, #24]
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	0800358c 	.word	0x0800358c
 8001d28:	08001c95 	.word	0x08001c95

08001d2c <__sfp>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <__sfp+0x70>)
 8001d30:	4607      	mov	r7, r0
 8001d32:	681e      	ldr	r6, [r3, #0]
 8001d34:	69b3      	ldr	r3, [r6, #24]
 8001d36:	b913      	cbnz	r3, 8001d3e <__sfp+0x12>
 8001d38:	4630      	mov	r0, r6
 8001d3a:	f7ff ffc7 	bl	8001ccc <__sinit>
 8001d3e:	3648      	adds	r6, #72	; 0x48
 8001d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	d503      	bpl.n	8001d50 <__sfp+0x24>
 8001d48:	6833      	ldr	r3, [r6, #0]
 8001d4a:	b133      	cbz	r3, 8001d5a <__sfp+0x2e>
 8001d4c:	6836      	ldr	r6, [r6, #0]
 8001d4e:	e7f7      	b.n	8001d40 <__sfp+0x14>
 8001d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d54:	b16d      	cbz	r5, 8001d72 <__sfp+0x46>
 8001d56:	3468      	adds	r4, #104	; 0x68
 8001d58:	e7f4      	b.n	8001d44 <__sfp+0x18>
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4638      	mov	r0, r7
 8001d5e:	f7ff ff9f 	bl	8001ca0 <__sfmoreglue>
 8001d62:	6030      	str	r0, [r6, #0]
 8001d64:	2800      	cmp	r0, #0
 8001d66:	d1f1      	bne.n	8001d4c <__sfp+0x20>
 8001d68:	230c      	movs	r3, #12
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4620      	mov	r0, r4
 8001d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <__sfp+0x74>)
 8001d74:	6665      	str	r5, [r4, #100]	; 0x64
 8001d76:	e9c4 5500 	strd	r5, r5, [r4]
 8001d7a:	60a5      	str	r5, [r4, #8]
 8001d7c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001d80:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001d84:	2208      	movs	r2, #8
 8001d86:	4629      	mov	r1, r5
 8001d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d8c:	f7ff fe82 	bl	8001a94 <memset>
 8001d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d98:	e7e9      	b.n	8001d6e <__sfp+0x42>
 8001d9a:	bf00      	nop
 8001d9c:	0800358c 	.word	0x0800358c
 8001da0:	ffff0001 	.word	0xffff0001

08001da4 <_fwalk>:
 8001da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da8:	4688      	mov	r8, r1
 8001daa:	2600      	movs	r6, #0
 8001dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001db0:	b914      	cbnz	r4, 8001db8 <_fwalk+0x14>
 8001db2:	4630      	mov	r0, r6
 8001db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001db8:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001dbc:	3f01      	subs	r7, #1
 8001dbe:	d501      	bpl.n	8001dc4 <_fwalk+0x20>
 8001dc0:	6824      	ldr	r4, [r4, #0]
 8001dc2:	e7f5      	b.n	8001db0 <_fwalk+0xc>
 8001dc4:	89ab      	ldrh	r3, [r5, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d906      	bls.n	8001dd8 <_fwalk+0x34>
 8001dca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	d002      	beq.n	8001dd8 <_fwalk+0x34>
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	47c0      	blx	r8
 8001dd6:	4306      	orrs	r6, r0
 8001dd8:	3568      	adds	r5, #104	; 0x68
 8001dda:	e7ef      	b.n	8001dbc <_fwalk+0x18>

08001ddc <_fwalk_reent>:
 8001ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001de0:	4680      	mov	r8, r0
 8001de2:	4689      	mov	r9, r1
 8001de4:	2600      	movs	r6, #0
 8001de6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001dea:	b914      	cbnz	r4, 8001df2 <_fwalk_reent+0x16>
 8001dec:	4630      	mov	r0, r6
 8001dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001df2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001df6:	3f01      	subs	r7, #1
 8001df8:	d501      	bpl.n	8001dfe <_fwalk_reent+0x22>
 8001dfa:	6824      	ldr	r4, [r4, #0]
 8001dfc:	e7f5      	b.n	8001dea <_fwalk_reent+0xe>
 8001dfe:	89ab      	ldrh	r3, [r5, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d907      	bls.n	8001e14 <_fwalk_reent+0x38>
 8001e04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	d003      	beq.n	8001e14 <_fwalk_reent+0x38>
 8001e0c:	4629      	mov	r1, r5
 8001e0e:	4640      	mov	r0, r8
 8001e10:	47c8      	blx	r9
 8001e12:	4306      	orrs	r6, r0
 8001e14:	3568      	adds	r5, #104	; 0x68
 8001e16:	e7ee      	b.n	8001df6 <_fwalk_reent+0x1a>

08001e18 <__locale_ctype_ptr_l>:
 8001e18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8001e1c:	4770      	bx	lr
	...

08001e20 <__locale_ctype_ptr>:
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <__locale_ctype_ptr+0x14>)
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <__locale_ctype_ptr+0x18>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf08      	it	eq
 8001e2c:	4613      	moveq	r3, r2
 8001e2e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8001e32:	4770      	bx	lr
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	20000070 	.word	0x20000070

08001e3c <__ascii_mbtowc>:
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	b901      	cbnz	r1, 8001e42 <__ascii_mbtowc+0x6>
 8001e40:	a901      	add	r1, sp, #4
 8001e42:	b142      	cbz	r2, 8001e56 <__ascii_mbtowc+0x1a>
 8001e44:	b14b      	cbz	r3, 8001e5a <__ascii_mbtowc+0x1e>
 8001e46:	7813      	ldrb	r3, [r2, #0]
 8001e48:	600b      	str	r3, [r1, #0]
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	1c10      	adds	r0, r2, #0
 8001e4e:	bf18      	it	ne
 8001e50:	2001      	movne	r0, #1
 8001e52:	b002      	add	sp, #8
 8001e54:	4770      	bx	lr
 8001e56:	4610      	mov	r0, r2
 8001e58:	e7fb      	b.n	8001e52 <__ascii_mbtowc+0x16>
 8001e5a:	f06f 0001 	mvn.w	r0, #1
 8001e5e:	e7f8      	b.n	8001e52 <__ascii_mbtowc+0x16>

08001e60 <_malloc_r>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	1ccd      	adds	r5, r1, #3
 8001e64:	f025 0503 	bic.w	r5, r5, #3
 8001e68:	3508      	adds	r5, #8
 8001e6a:	2d0c      	cmp	r5, #12
 8001e6c:	bf38      	it	cc
 8001e6e:	250c      	movcc	r5, #12
 8001e70:	2d00      	cmp	r5, #0
 8001e72:	4606      	mov	r6, r0
 8001e74:	db01      	blt.n	8001e7a <_malloc_r+0x1a>
 8001e76:	42a9      	cmp	r1, r5
 8001e78:	d903      	bls.n	8001e82 <_malloc_r+0x22>
 8001e7a:	230c      	movs	r3, #12
 8001e7c:	6033      	str	r3, [r6, #0]
 8001e7e:	2000      	movs	r0, #0
 8001e80:	bd70      	pop	{r4, r5, r6, pc}
 8001e82:	f001 fa6e 	bl	8003362 <__malloc_lock>
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <_malloc_r+0xac>)
 8001e88:	6814      	ldr	r4, [r2, #0]
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	b991      	cbnz	r1, 8001eb4 <_malloc_r+0x54>
 8001e8e:	4c20      	ldr	r4, [pc, #128]	; (8001f10 <_malloc_r+0xb0>)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	b91b      	cbnz	r3, 8001e9c <_malloc_r+0x3c>
 8001e94:	4630      	mov	r0, r6
 8001e96:	f000 fe69 	bl	8002b6c <_sbrk_r>
 8001e9a:	6020      	str	r0, [r4, #0]
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f000 fe64 	bl	8002b6c <_sbrk_r>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d124      	bne.n	8001ef2 <_malloc_r+0x92>
 8001ea8:	230c      	movs	r3, #12
 8001eaa:	4630      	mov	r0, r6
 8001eac:	6033      	str	r3, [r6, #0]
 8001eae:	f001 fa59 	bl	8003364 <__malloc_unlock>
 8001eb2:	e7e4      	b.n	8001e7e <_malloc_r+0x1e>
 8001eb4:	680b      	ldr	r3, [r1, #0]
 8001eb6:	1b5b      	subs	r3, r3, r5
 8001eb8:	d418      	bmi.n	8001eec <_malloc_r+0x8c>
 8001eba:	2b0b      	cmp	r3, #11
 8001ebc:	d90f      	bls.n	8001ede <_malloc_r+0x7e>
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	18cc      	adds	r4, r1, r3
 8001ec2:	50cd      	str	r5, [r1, r3]
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f001 fa4d 	bl	8003364 <__malloc_unlock>
 8001eca:	f104 000b 	add.w	r0, r4, #11
 8001ece:	1d23      	adds	r3, r4, #4
 8001ed0:	f020 0007 	bic.w	r0, r0, #7
 8001ed4:	1ac3      	subs	r3, r0, r3
 8001ed6:	d0d3      	beq.n	8001e80 <_malloc_r+0x20>
 8001ed8:	425a      	negs	r2, r3
 8001eda:	50e2      	str	r2, [r4, r3]
 8001edc:	e7d0      	b.n	8001e80 <_malloc_r+0x20>
 8001ede:	684b      	ldr	r3, [r1, #4]
 8001ee0:	428c      	cmp	r4, r1
 8001ee2:	bf16      	itet	ne
 8001ee4:	6063      	strne	r3, [r4, #4]
 8001ee6:	6013      	streq	r3, [r2, #0]
 8001ee8:	460c      	movne	r4, r1
 8001eea:	e7eb      	b.n	8001ec4 <_malloc_r+0x64>
 8001eec:	460c      	mov	r4, r1
 8001eee:	6849      	ldr	r1, [r1, #4]
 8001ef0:	e7cc      	b.n	8001e8c <_malloc_r+0x2c>
 8001ef2:	1cc4      	adds	r4, r0, #3
 8001ef4:	f024 0403 	bic.w	r4, r4, #3
 8001ef8:	42a0      	cmp	r0, r4
 8001efa:	d005      	beq.n	8001f08 <_malloc_r+0xa8>
 8001efc:	1a21      	subs	r1, r4, r0
 8001efe:	4630      	mov	r0, r6
 8001f00:	f000 fe34 	bl	8002b6c <_sbrk_r>
 8001f04:	3001      	adds	r0, #1
 8001f06:	d0cf      	beq.n	8001ea8 <_malloc_r+0x48>
 8001f08:	6025      	str	r5, [r4, #0]
 8001f0a:	e7db      	b.n	8001ec4 <_malloc_r+0x64>
 8001f0c:	200001fc 	.word	0x200001fc
 8001f10:	20000200 	.word	0x20000200

08001f14 <__sfputc_r>:
 8001f14:	6893      	ldr	r3, [r2, #8]
 8001f16:	b410      	push	{r4}
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	6093      	str	r3, [r2, #8]
 8001f1e:	da07      	bge.n	8001f30 <__sfputc_r+0x1c>
 8001f20:	6994      	ldr	r4, [r2, #24]
 8001f22:	42a3      	cmp	r3, r4
 8001f24:	db01      	blt.n	8001f2a <__sfputc_r+0x16>
 8001f26:	290a      	cmp	r1, #10
 8001f28:	d102      	bne.n	8001f30 <__sfputc_r+0x1c>
 8001f2a:	bc10      	pop	{r4}
 8001f2c:	f000 bfd8 	b.w	8002ee0 <__swbuf_r>
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	1c58      	adds	r0, r3, #1
 8001f34:	6010      	str	r0, [r2, #0]
 8001f36:	7019      	strb	r1, [r3, #0]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	bc10      	pop	{r4}
 8001f3c:	4770      	bx	lr

08001f3e <__sfputs_r>:
 8001f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f40:	4606      	mov	r6, r0
 8001f42:	460f      	mov	r7, r1
 8001f44:	4614      	mov	r4, r2
 8001f46:	18d5      	adds	r5, r2, r3
 8001f48:	42ac      	cmp	r4, r5
 8001f4a:	d101      	bne.n	8001f50 <__sfputs_r+0x12>
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	e007      	b.n	8001f60 <__sfputs_r+0x22>
 8001f50:	463a      	mov	r2, r7
 8001f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f56:	4630      	mov	r0, r6
 8001f58:	f7ff ffdc 	bl	8001f14 <__sfputc_r>
 8001f5c:	1c43      	adds	r3, r0, #1
 8001f5e:	d1f3      	bne.n	8001f48 <__sfputs_r+0xa>
 8001f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f64 <_vfiprintf_r>:
 8001f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f68:	460c      	mov	r4, r1
 8001f6a:	b09d      	sub	sp, #116	; 0x74
 8001f6c:	4617      	mov	r7, r2
 8001f6e:	461d      	mov	r5, r3
 8001f70:	4606      	mov	r6, r0
 8001f72:	b118      	cbz	r0, 8001f7c <_vfiprintf_r+0x18>
 8001f74:	6983      	ldr	r3, [r0, #24]
 8001f76:	b90b      	cbnz	r3, 8001f7c <_vfiprintf_r+0x18>
 8001f78:	f7ff fea8 	bl	8001ccc <__sinit>
 8001f7c:	4b7c      	ldr	r3, [pc, #496]	; (8002170 <_vfiprintf_r+0x20c>)
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d158      	bne.n	8002034 <_vfiprintf_r+0xd0>
 8001f82:	6874      	ldr	r4, [r6, #4]
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	0718      	lsls	r0, r3, #28
 8001f88:	d55e      	bpl.n	8002048 <_vfiprintf_r+0xe4>
 8001f8a:	6923      	ldr	r3, [r4, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d05b      	beq.n	8002048 <_vfiprintf_r+0xe4>
 8001f90:	2300      	movs	r3, #0
 8001f92:	9309      	str	r3, [sp, #36]	; 0x24
 8001f94:	2320      	movs	r3, #32
 8001f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f9a:	2330      	movs	r3, #48	; 0x30
 8001f9c:	f04f 0b01 	mov.w	fp, #1
 8001fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fa4:	9503      	str	r5, [sp, #12]
 8001fa6:	46b8      	mov	r8, r7
 8001fa8:	4645      	mov	r5, r8
 8001faa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001fae:	b10b      	cbz	r3, 8001fb4 <_vfiprintf_r+0x50>
 8001fb0:	2b25      	cmp	r3, #37	; 0x25
 8001fb2:	d154      	bne.n	800205e <_vfiprintf_r+0xfa>
 8001fb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8001fb8:	d00b      	beq.n	8001fd2 <_vfiprintf_r+0x6e>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	463a      	mov	r2, r7
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f7ff ffbc 	bl	8001f3e <__sfputs_r>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	f000 80c2 	beq.w	8002150 <_vfiprintf_r+0x1ec>
 8001fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fce:	4453      	add	r3, sl
 8001fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd2:	f898 3000 	ldrb.w	r3, [r8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80ba 	beq.w	8002150 <_vfiprintf_r+0x1ec>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fe6:	9304      	str	r3, [sp, #16]
 8001fe8:	9307      	str	r3, [sp, #28]
 8001fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fee:	931a      	str	r3, [sp, #104]	; 0x68
 8001ff0:	46a8      	mov	r8, r5
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001ff8:	485e      	ldr	r0, [pc, #376]	; (8002174 <_vfiprintf_r+0x210>)
 8001ffa:	f001 f999 	bl	8003330 <memchr>
 8001ffe:	9b04      	ldr	r3, [sp, #16]
 8002000:	bb78      	cbnz	r0, 8002062 <_vfiprintf_r+0xfe>
 8002002:	06d9      	lsls	r1, r3, #27
 8002004:	bf44      	itt	mi
 8002006:	2220      	movmi	r2, #32
 8002008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800200c:	071a      	lsls	r2, r3, #28
 800200e:	bf44      	itt	mi
 8002010:	222b      	movmi	r2, #43	; 0x2b
 8002012:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002016:	782a      	ldrb	r2, [r5, #0]
 8002018:	2a2a      	cmp	r2, #42	; 0x2a
 800201a:	d02a      	beq.n	8002072 <_vfiprintf_r+0x10e>
 800201c:	46a8      	mov	r8, r5
 800201e:	2000      	movs	r0, #0
 8002020:	250a      	movs	r5, #10
 8002022:	9a07      	ldr	r2, [sp, #28]
 8002024:	4641      	mov	r1, r8
 8002026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800202a:	3b30      	subs	r3, #48	; 0x30
 800202c:	2b09      	cmp	r3, #9
 800202e:	d969      	bls.n	8002104 <_vfiprintf_r+0x1a0>
 8002030:	b360      	cbz	r0, 800208c <_vfiprintf_r+0x128>
 8002032:	e024      	b.n	800207e <_vfiprintf_r+0x11a>
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <_vfiprintf_r+0x214>)
 8002036:	429c      	cmp	r4, r3
 8002038:	d101      	bne.n	800203e <_vfiprintf_r+0xda>
 800203a:	68b4      	ldr	r4, [r6, #8]
 800203c:	e7a2      	b.n	8001f84 <_vfiprintf_r+0x20>
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <_vfiprintf_r+0x218>)
 8002040:	429c      	cmp	r4, r3
 8002042:	bf08      	it	eq
 8002044:	68f4      	ldreq	r4, [r6, #12]
 8002046:	e79d      	b.n	8001f84 <_vfiprintf_r+0x20>
 8002048:	4621      	mov	r1, r4
 800204a:	4630      	mov	r0, r6
 800204c:	f000 ffba 	bl	8002fc4 <__swsetup_r>
 8002050:	2800      	cmp	r0, #0
 8002052:	d09d      	beq.n	8001f90 <_vfiprintf_r+0x2c>
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	b01d      	add	sp, #116	; 0x74
 800205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800205e:	46a8      	mov	r8, r5
 8002060:	e7a2      	b.n	8001fa8 <_vfiprintf_r+0x44>
 8002062:	4a44      	ldr	r2, [pc, #272]	; (8002174 <_vfiprintf_r+0x210>)
 8002064:	4645      	mov	r5, r8
 8002066:	1a80      	subs	r0, r0, r2
 8002068:	fa0b f000 	lsl.w	r0, fp, r0
 800206c:	4318      	orrs	r0, r3
 800206e:	9004      	str	r0, [sp, #16]
 8002070:	e7be      	b.n	8001ff0 <_vfiprintf_r+0x8c>
 8002072:	9a03      	ldr	r2, [sp, #12]
 8002074:	1d11      	adds	r1, r2, #4
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	9103      	str	r1, [sp, #12]
 800207a:	2a00      	cmp	r2, #0
 800207c:	db01      	blt.n	8002082 <_vfiprintf_r+0x11e>
 800207e:	9207      	str	r2, [sp, #28]
 8002080:	e004      	b.n	800208c <_vfiprintf_r+0x128>
 8002082:	4252      	negs	r2, r2
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	9207      	str	r2, [sp, #28]
 800208a:	9304      	str	r3, [sp, #16]
 800208c:	f898 3000 	ldrb.w	r3, [r8]
 8002090:	2b2e      	cmp	r3, #46	; 0x2e
 8002092:	d10e      	bne.n	80020b2 <_vfiprintf_r+0x14e>
 8002094:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002098:	2b2a      	cmp	r3, #42	; 0x2a
 800209a:	d138      	bne.n	800210e <_vfiprintf_r+0x1aa>
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	f108 0802 	add.w	r8, r8, #2
 80020a2:	1d1a      	adds	r2, r3, #4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	9203      	str	r2, [sp, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bfb8      	it	lt
 80020ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80020b0:	9305      	str	r3, [sp, #20]
 80020b2:	4d33      	ldr	r5, [pc, #204]	; (8002180 <_vfiprintf_r+0x21c>)
 80020b4:	2203      	movs	r2, #3
 80020b6:	f898 1000 	ldrb.w	r1, [r8]
 80020ba:	4628      	mov	r0, r5
 80020bc:	f001 f938 	bl	8003330 <memchr>
 80020c0:	b140      	cbz	r0, 80020d4 <_vfiprintf_r+0x170>
 80020c2:	2340      	movs	r3, #64	; 0x40
 80020c4:	1b40      	subs	r0, r0, r5
 80020c6:	fa03 f000 	lsl.w	r0, r3, r0
 80020ca:	9b04      	ldr	r3, [sp, #16]
 80020cc:	f108 0801 	add.w	r8, r8, #1
 80020d0:	4303      	orrs	r3, r0
 80020d2:	9304      	str	r3, [sp, #16]
 80020d4:	f898 1000 	ldrb.w	r1, [r8]
 80020d8:	2206      	movs	r2, #6
 80020da:	482a      	ldr	r0, [pc, #168]	; (8002184 <_vfiprintf_r+0x220>)
 80020dc:	f108 0701 	add.w	r7, r8, #1
 80020e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020e4:	f001 f924 	bl	8003330 <memchr>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d037      	beq.n	800215c <_vfiprintf_r+0x1f8>
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <_vfiprintf_r+0x224>)
 80020ee:	bb1b      	cbnz	r3, 8002138 <_vfiprintf_r+0x1d4>
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	3307      	adds	r3, #7
 80020f4:	f023 0307 	bic.w	r3, r3, #7
 80020f8:	3308      	adds	r3, #8
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020fe:	444b      	add	r3, r9
 8002100:	9309      	str	r3, [sp, #36]	; 0x24
 8002102:	e750      	b.n	8001fa6 <_vfiprintf_r+0x42>
 8002104:	fb05 3202 	mla	r2, r5, r2, r3
 8002108:	2001      	movs	r0, #1
 800210a:	4688      	mov	r8, r1
 800210c:	e78a      	b.n	8002024 <_vfiprintf_r+0xc0>
 800210e:	2300      	movs	r3, #0
 8002110:	250a      	movs	r5, #10
 8002112:	4619      	mov	r1, r3
 8002114:	f108 0801 	add.w	r8, r8, #1
 8002118:	9305      	str	r3, [sp, #20]
 800211a:	4640      	mov	r0, r8
 800211c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002120:	3a30      	subs	r2, #48	; 0x30
 8002122:	2a09      	cmp	r2, #9
 8002124:	d903      	bls.n	800212e <_vfiprintf_r+0x1ca>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0c3      	beq.n	80020b2 <_vfiprintf_r+0x14e>
 800212a:	9105      	str	r1, [sp, #20]
 800212c:	e7c1      	b.n	80020b2 <_vfiprintf_r+0x14e>
 800212e:	fb05 2101 	mla	r1, r5, r1, r2
 8002132:	2301      	movs	r3, #1
 8002134:	4680      	mov	r8, r0
 8002136:	e7f0      	b.n	800211a <_vfiprintf_r+0x1b6>
 8002138:	ab03      	add	r3, sp, #12
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4622      	mov	r2, r4
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <_vfiprintf_r+0x228>)
 8002140:	a904      	add	r1, sp, #16
 8002142:	4630      	mov	r0, r6
 8002144:	f3af 8000 	nop.w
 8002148:	f1b0 3fff 	cmp.w	r0, #4294967295
 800214c:	4681      	mov	r9, r0
 800214e:	d1d5      	bne.n	80020fc <_vfiprintf_r+0x198>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	065b      	lsls	r3, r3, #25
 8002154:	f53f af7e 	bmi.w	8002054 <_vfiprintf_r+0xf0>
 8002158:	9809      	ldr	r0, [sp, #36]	; 0x24
 800215a:	e77d      	b.n	8002058 <_vfiprintf_r+0xf4>
 800215c:	ab03      	add	r3, sp, #12
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	4622      	mov	r2, r4
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <_vfiprintf_r+0x228>)
 8002164:	a904      	add	r1, sp, #16
 8002166:	4630      	mov	r0, r6
 8002168:	f000 f888 	bl	800227c <_printf_i>
 800216c:	e7ec      	b.n	8002148 <_vfiprintf_r+0x1e4>
 800216e:	bf00      	nop
 8002170:	080035b0 	.word	0x080035b0
 8002174:	080035fa 	.word	0x080035fa
 8002178:	080035d0 	.word	0x080035d0
 800217c:	08003590 	.word	0x08003590
 8002180:	08003600 	.word	0x08003600
 8002184:	08003604 	.word	0x08003604
 8002188:	00000000 	.word	0x00000000
 800218c:	08001f3f 	.word	0x08001f3f

08002190 <_printf_common>:
 8002190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002194:	4691      	mov	r9, r2
 8002196:	461f      	mov	r7, r3
 8002198:	688a      	ldr	r2, [r1, #8]
 800219a:	690b      	ldr	r3, [r1, #16]
 800219c:	4606      	mov	r6, r0
 800219e:	4293      	cmp	r3, r2
 80021a0:	bfb8      	it	lt
 80021a2:	4613      	movlt	r3, r2
 80021a4:	f8c9 3000 	str.w	r3, [r9]
 80021a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021ac:	460c      	mov	r4, r1
 80021ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021b2:	b112      	cbz	r2, 80021ba <_printf_common+0x2a>
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8c9 3000 	str.w	r3, [r9]
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	0699      	lsls	r1, r3, #26
 80021be:	bf42      	ittt	mi
 80021c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80021c4:	3302      	addmi	r3, #2
 80021c6:	f8c9 3000 	strmi.w	r3, [r9]
 80021ca:	6825      	ldr	r5, [r4, #0]
 80021cc:	f015 0506 	ands.w	r5, r5, #6
 80021d0:	d107      	bne.n	80021e2 <_printf_common+0x52>
 80021d2:	f104 0a19 	add.w	sl, r4, #25
 80021d6:	68e3      	ldr	r3, [r4, #12]
 80021d8:	f8d9 2000 	ldr.w	r2, [r9]
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	42ab      	cmp	r3, r5
 80021e0:	dc29      	bgt.n	8002236 <_printf_common+0xa6>
 80021e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	3300      	adds	r3, #0
 80021ea:	bf18      	it	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	0692      	lsls	r2, r2, #26
 80021f0:	d42e      	bmi.n	8002250 <_printf_common+0xc0>
 80021f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021f6:	4639      	mov	r1, r7
 80021f8:	4630      	mov	r0, r6
 80021fa:	47c0      	blx	r8
 80021fc:	3001      	adds	r0, #1
 80021fe:	d021      	beq.n	8002244 <_printf_common+0xb4>
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	68e5      	ldr	r5, [r4, #12]
 8002204:	f003 0306 	and.w	r3, r3, #6
 8002208:	2b04      	cmp	r3, #4
 800220a:	bf18      	it	ne
 800220c:	2500      	movne	r5, #0
 800220e:	f8d9 2000 	ldr.w	r2, [r9]
 8002212:	f04f 0900 	mov.w	r9, #0
 8002216:	bf08      	it	eq
 8002218:	1aad      	subeq	r5, r5, r2
 800221a:	68a3      	ldr	r3, [r4, #8]
 800221c:	6922      	ldr	r2, [r4, #16]
 800221e:	bf08      	it	eq
 8002220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002224:	4293      	cmp	r3, r2
 8002226:	bfc4      	itt	gt
 8002228:	1a9b      	subgt	r3, r3, r2
 800222a:	18ed      	addgt	r5, r5, r3
 800222c:	341a      	adds	r4, #26
 800222e:	454d      	cmp	r5, r9
 8002230:	d11a      	bne.n	8002268 <_printf_common+0xd8>
 8002232:	2000      	movs	r0, #0
 8002234:	e008      	b.n	8002248 <_printf_common+0xb8>
 8002236:	2301      	movs	r3, #1
 8002238:	4652      	mov	r2, sl
 800223a:	4639      	mov	r1, r7
 800223c:	4630      	mov	r0, r6
 800223e:	47c0      	blx	r8
 8002240:	3001      	adds	r0, #1
 8002242:	d103      	bne.n	800224c <_printf_common+0xbc>
 8002244:	f04f 30ff 	mov.w	r0, #4294967295
 8002248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800224c:	3501      	adds	r5, #1
 800224e:	e7c2      	b.n	80021d6 <_printf_common+0x46>
 8002250:	2030      	movs	r0, #48	; 0x30
 8002252:	18e1      	adds	r1, r4, r3
 8002254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800225e:	4422      	add	r2, r4
 8002260:	3302      	adds	r3, #2
 8002262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002266:	e7c4      	b.n	80021f2 <_printf_common+0x62>
 8002268:	2301      	movs	r3, #1
 800226a:	4622      	mov	r2, r4
 800226c:	4639      	mov	r1, r7
 800226e:	4630      	mov	r0, r6
 8002270:	47c0      	blx	r8
 8002272:	3001      	adds	r0, #1
 8002274:	d0e6      	beq.n	8002244 <_printf_common+0xb4>
 8002276:	f109 0901 	add.w	r9, r9, #1
 800227a:	e7d8      	b.n	800222e <_printf_common+0x9e>

0800227c <_printf_i>:
 800227c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002284:	460c      	mov	r4, r1
 8002286:	7e09      	ldrb	r1, [r1, #24]
 8002288:	b085      	sub	sp, #20
 800228a:	296e      	cmp	r1, #110	; 0x6e
 800228c:	4617      	mov	r7, r2
 800228e:	4606      	mov	r6, r0
 8002290:	4698      	mov	r8, r3
 8002292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002294:	f000 80b3 	beq.w	80023fe <_printf_i+0x182>
 8002298:	d822      	bhi.n	80022e0 <_printf_i+0x64>
 800229a:	2963      	cmp	r1, #99	; 0x63
 800229c:	d036      	beq.n	800230c <_printf_i+0x90>
 800229e:	d80a      	bhi.n	80022b6 <_printf_i+0x3a>
 80022a0:	2900      	cmp	r1, #0
 80022a2:	f000 80b9 	beq.w	8002418 <_printf_i+0x19c>
 80022a6:	2958      	cmp	r1, #88	; 0x58
 80022a8:	f000 8083 	beq.w	80023b2 <_printf_i+0x136>
 80022ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80022b4:	e032      	b.n	800231c <_printf_i+0xa0>
 80022b6:	2964      	cmp	r1, #100	; 0x64
 80022b8:	d001      	beq.n	80022be <_printf_i+0x42>
 80022ba:	2969      	cmp	r1, #105	; 0x69
 80022bc:	d1f6      	bne.n	80022ac <_printf_i+0x30>
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	6813      	ldr	r3, [r2, #0]
 80022c2:	0605      	lsls	r5, r0, #24
 80022c4:	f103 0104 	add.w	r1, r3, #4
 80022c8:	d52a      	bpl.n	8002320 <_printf_i+0xa4>
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6011      	str	r1, [r2, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da03      	bge.n	80022da <_printf_i+0x5e>
 80022d2:	222d      	movs	r2, #45	; 0x2d
 80022d4:	425b      	negs	r3, r3
 80022d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022da:	486f      	ldr	r0, [pc, #444]	; (8002498 <_printf_i+0x21c>)
 80022dc:	220a      	movs	r2, #10
 80022de:	e039      	b.n	8002354 <_printf_i+0xd8>
 80022e0:	2973      	cmp	r1, #115	; 0x73
 80022e2:	f000 809d 	beq.w	8002420 <_printf_i+0x1a4>
 80022e6:	d808      	bhi.n	80022fa <_printf_i+0x7e>
 80022e8:	296f      	cmp	r1, #111	; 0x6f
 80022ea:	d020      	beq.n	800232e <_printf_i+0xb2>
 80022ec:	2970      	cmp	r1, #112	; 0x70
 80022ee:	d1dd      	bne.n	80022ac <_printf_i+0x30>
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	6023      	str	r3, [r4, #0]
 80022f8:	e003      	b.n	8002302 <_printf_i+0x86>
 80022fa:	2975      	cmp	r1, #117	; 0x75
 80022fc:	d017      	beq.n	800232e <_printf_i+0xb2>
 80022fe:	2978      	cmp	r1, #120	; 0x78
 8002300:	d1d4      	bne.n	80022ac <_printf_i+0x30>
 8002302:	2378      	movs	r3, #120	; 0x78
 8002304:	4865      	ldr	r0, [pc, #404]	; (800249c <_printf_i+0x220>)
 8002306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800230a:	e055      	b.n	80023b8 <_printf_i+0x13c>
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002312:	1d19      	adds	r1, r3, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6011      	str	r1, [r2, #0]
 8002318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800231c:	2301      	movs	r3, #1
 800231e:	e08c      	b.n	800243a <_printf_i+0x1be>
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002326:	6011      	str	r1, [r2, #0]
 8002328:	bf18      	it	ne
 800232a:	b21b      	sxthne	r3, r3
 800232c:	e7cf      	b.n	80022ce <_printf_i+0x52>
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	6825      	ldr	r5, [r4, #0]
 8002332:	1d18      	adds	r0, r3, #4
 8002334:	6010      	str	r0, [r2, #0]
 8002336:	0628      	lsls	r0, r5, #24
 8002338:	d501      	bpl.n	800233e <_printf_i+0xc2>
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	e002      	b.n	8002344 <_printf_i+0xc8>
 800233e:	0668      	lsls	r0, r5, #25
 8002340:	d5fb      	bpl.n	800233a <_printf_i+0xbe>
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	296f      	cmp	r1, #111	; 0x6f
 8002346:	bf14      	ite	ne
 8002348:	220a      	movne	r2, #10
 800234a:	2208      	moveq	r2, #8
 800234c:	4852      	ldr	r0, [pc, #328]	; (8002498 <_printf_i+0x21c>)
 800234e:	2100      	movs	r1, #0
 8002350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002354:	6865      	ldr	r5, [r4, #4]
 8002356:	2d00      	cmp	r5, #0
 8002358:	60a5      	str	r5, [r4, #8]
 800235a:	f2c0 8095 	blt.w	8002488 <_printf_i+0x20c>
 800235e:	6821      	ldr	r1, [r4, #0]
 8002360:	f021 0104 	bic.w	r1, r1, #4
 8002364:	6021      	str	r1, [r4, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d13d      	bne.n	80023e6 <_printf_i+0x16a>
 800236a:	2d00      	cmp	r5, #0
 800236c:	f040 808e 	bne.w	800248c <_printf_i+0x210>
 8002370:	4665      	mov	r5, ip
 8002372:	2a08      	cmp	r2, #8
 8002374:	d10b      	bne.n	800238e <_printf_i+0x112>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	d508      	bpl.n	800238e <_printf_i+0x112>
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	bfde      	ittt	le
 8002384:	2330      	movle	r3, #48	; 0x30
 8002386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800238a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800238e:	ebac 0305 	sub.w	r3, ip, r5
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	f8cd 8000 	str.w	r8, [sp]
 8002398:	463b      	mov	r3, r7
 800239a:	aa03      	add	r2, sp, #12
 800239c:	4621      	mov	r1, r4
 800239e:	4630      	mov	r0, r6
 80023a0:	f7ff fef6 	bl	8002190 <_printf_common>
 80023a4:	3001      	adds	r0, #1
 80023a6:	d14d      	bne.n	8002444 <_printf_i+0x1c8>
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	b005      	add	sp, #20
 80023ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023b2:	4839      	ldr	r0, [pc, #228]	; (8002498 <_printf_i+0x21c>)
 80023b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	6821      	ldr	r1, [r4, #0]
 80023bc:	1d1d      	adds	r5, r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6015      	str	r5, [r2, #0]
 80023c2:	060a      	lsls	r2, r1, #24
 80023c4:	d50b      	bpl.n	80023de <_printf_i+0x162>
 80023c6:	07ca      	lsls	r2, r1, #31
 80023c8:	bf44      	itt	mi
 80023ca:	f041 0120 	orrmi.w	r1, r1, #32
 80023ce:	6021      	strmi	r1, [r4, #0]
 80023d0:	b91b      	cbnz	r3, 80023da <_printf_i+0x15e>
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	f022 0220 	bic.w	r2, r2, #32
 80023d8:	6022      	str	r2, [r4, #0]
 80023da:	2210      	movs	r2, #16
 80023dc:	e7b7      	b.n	800234e <_printf_i+0xd2>
 80023de:	064d      	lsls	r5, r1, #25
 80023e0:	bf48      	it	mi
 80023e2:	b29b      	uxthmi	r3, r3
 80023e4:	e7ef      	b.n	80023c6 <_printf_i+0x14a>
 80023e6:	4665      	mov	r5, ip
 80023e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ec:	fb02 3311 	mls	r3, r2, r1, r3
 80023f0:	5cc3      	ldrb	r3, [r0, r3]
 80023f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023f6:	460b      	mov	r3, r1
 80023f8:	2900      	cmp	r1, #0
 80023fa:	d1f5      	bne.n	80023e8 <_printf_i+0x16c>
 80023fc:	e7b9      	b.n	8002372 <_printf_i+0xf6>
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	6825      	ldr	r5, [r4, #0]
 8002402:	1d18      	adds	r0, r3, #4
 8002404:	6961      	ldr	r1, [r4, #20]
 8002406:	6010      	str	r0, [r2, #0]
 8002408:	0628      	lsls	r0, r5, #24
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	d501      	bpl.n	8002412 <_printf_i+0x196>
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	e002      	b.n	8002418 <_printf_i+0x19c>
 8002412:	066a      	lsls	r2, r5, #25
 8002414:	d5fb      	bpl.n	800240e <_printf_i+0x192>
 8002416:	8019      	strh	r1, [r3, #0]
 8002418:	2300      	movs	r3, #0
 800241a:	4665      	mov	r5, ip
 800241c:	6123      	str	r3, [r4, #16]
 800241e:	e7b9      	b.n	8002394 <_printf_i+0x118>
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	1d19      	adds	r1, r3, #4
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	681d      	ldr	r5, [r3, #0]
 8002428:	6862      	ldr	r2, [r4, #4]
 800242a:	2100      	movs	r1, #0
 800242c:	4628      	mov	r0, r5
 800242e:	f000 ff7f 	bl	8003330 <memchr>
 8002432:	b108      	cbz	r0, 8002438 <_printf_i+0x1bc>
 8002434:	1b40      	subs	r0, r0, r5
 8002436:	6060      	str	r0, [r4, #4]
 8002438:	6863      	ldr	r3, [r4, #4]
 800243a:	6123      	str	r3, [r4, #16]
 800243c:	2300      	movs	r3, #0
 800243e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002442:	e7a7      	b.n	8002394 <_printf_i+0x118>
 8002444:	6923      	ldr	r3, [r4, #16]
 8002446:	462a      	mov	r2, r5
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d0aa      	beq.n	80023a8 <_printf_i+0x12c>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	079b      	lsls	r3, r3, #30
 8002456:	d413      	bmi.n	8002480 <_printf_i+0x204>
 8002458:	68e0      	ldr	r0, [r4, #12]
 800245a:	9b03      	ldr	r3, [sp, #12]
 800245c:	4298      	cmp	r0, r3
 800245e:	bfb8      	it	lt
 8002460:	4618      	movlt	r0, r3
 8002462:	e7a3      	b.n	80023ac <_printf_i+0x130>
 8002464:	2301      	movs	r3, #1
 8002466:	464a      	mov	r2, r9
 8002468:	4639      	mov	r1, r7
 800246a:	4630      	mov	r0, r6
 800246c:	47c0      	blx	r8
 800246e:	3001      	adds	r0, #1
 8002470:	d09a      	beq.n	80023a8 <_printf_i+0x12c>
 8002472:	3501      	adds	r5, #1
 8002474:	68e3      	ldr	r3, [r4, #12]
 8002476:	9a03      	ldr	r2, [sp, #12]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	42ab      	cmp	r3, r5
 800247c:	dcf2      	bgt.n	8002464 <_printf_i+0x1e8>
 800247e:	e7eb      	b.n	8002458 <_printf_i+0x1dc>
 8002480:	2500      	movs	r5, #0
 8002482:	f104 0919 	add.w	r9, r4, #25
 8002486:	e7f5      	b.n	8002474 <_printf_i+0x1f8>
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ac      	bne.n	80023e6 <_printf_i+0x16a>
 800248c:	7803      	ldrb	r3, [r0, #0]
 800248e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002496:	e76c      	b.n	8002372 <_printf_i+0xf6>
 8002498:	0800360b 	.word	0x0800360b
 800249c:	0800361c 	.word	0x0800361c

080024a0 <__svfiscanf_r>:
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	460c      	mov	r4, r1
 80024a6:	2100      	movs	r1, #0
 80024a8:	4606      	mov	r6, r0
 80024aa:	4692      	mov	sl, r2
 80024ac:	270a      	movs	r7, #10
 80024ae:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80024b2:	9144      	str	r1, [sp, #272]	; 0x110
 80024b4:	9145      	str	r1, [sp, #276]	; 0x114
 80024b6:	499e      	ldr	r1, [pc, #632]	; (8002730 <__svfiscanf_r+0x290>)
 80024b8:	f10d 0804 	add.w	r8, sp, #4
 80024bc:	91a0      	str	r1, [sp, #640]	; 0x280
 80024be:	499d      	ldr	r1, [pc, #628]	; (8002734 <__svfiscanf_r+0x294>)
 80024c0:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8002738 <__svfiscanf_r+0x298>
 80024c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80024c8:	91a1      	str	r1, [sp, #644]	; 0x284
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f89a 3000 	ldrb.w	r3, [sl]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 812a 	beq.w	800272a <__svfiscanf_r+0x28a>
 80024d6:	4655      	mov	r5, sl
 80024d8:	f7ff fca2 	bl	8001e20 <__locale_ctype_ptr>
 80024dc:	f815 bb01 	ldrb.w	fp, [r5], #1
 80024e0:	4458      	add	r0, fp
 80024e2:	7843      	ldrb	r3, [r0, #1]
 80024e4:	f013 0308 	ands.w	r3, r3, #8
 80024e8:	d01c      	beq.n	8002524 <__svfiscanf_r+0x84>
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dd12      	ble.n	8002516 <__svfiscanf_r+0x76>
 80024f0:	f7ff fc96 	bl	8001e20 <__locale_ctype_ptr>
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	4410      	add	r0, r2
 80024fa:	7842      	ldrb	r2, [r0, #1]
 80024fc:	0712      	lsls	r2, r2, #28
 80024fe:	d401      	bmi.n	8002504 <__svfiscanf_r+0x64>
 8002500:	46aa      	mov	sl, r5
 8002502:	e7e3      	b.n	80024cc <__svfiscanf_r+0x2c>
 8002504:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002506:	3301      	adds	r3, #1
 8002508:	3201      	adds	r2, #1
 800250a:	9245      	str	r2, [sp, #276]	; 0x114
 800250c:	6862      	ldr	r2, [r4, #4]
 800250e:	6023      	str	r3, [r4, #0]
 8002510:	3a01      	subs	r2, #1
 8002512:	6062      	str	r2, [r4, #4]
 8002514:	e7e9      	b.n	80024ea <__svfiscanf_r+0x4a>
 8002516:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002518:	4621      	mov	r1, r4
 800251a:	4630      	mov	r0, r6
 800251c:	4798      	blx	r3
 800251e:	2800      	cmp	r0, #0
 8002520:	d0e6      	beq.n	80024f0 <__svfiscanf_r+0x50>
 8002522:	e7ed      	b.n	8002500 <__svfiscanf_r+0x60>
 8002524:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002528:	f040 8082 	bne.w	8002630 <__svfiscanf_r+0x190>
 800252c:	9343      	str	r3, [sp, #268]	; 0x10c
 800252e:	9341      	str	r3, [sp, #260]	; 0x104
 8002530:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002534:	2b2a      	cmp	r3, #42	; 0x2a
 8002536:	d103      	bne.n	8002540 <__svfiscanf_r+0xa0>
 8002538:	2310      	movs	r3, #16
 800253a:	f10a 0502 	add.w	r5, sl, #2
 800253e:	9341      	str	r3, [sp, #260]	; 0x104
 8002540:	46aa      	mov	sl, r5
 8002542:	f815 1b01 	ldrb.w	r1, [r5], #1
 8002546:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800254a:	2a09      	cmp	r2, #9
 800254c:	d922      	bls.n	8002594 <__svfiscanf_r+0xf4>
 800254e:	2203      	movs	r2, #3
 8002550:	4879      	ldr	r0, [pc, #484]	; (8002738 <__svfiscanf_r+0x298>)
 8002552:	f000 feed 	bl	8003330 <memchr>
 8002556:	b138      	cbz	r0, 8002568 <__svfiscanf_r+0xc8>
 8002558:	eba0 0309 	sub.w	r3, r0, r9
 800255c:	2001      	movs	r0, #1
 800255e:	46aa      	mov	sl, r5
 8002560:	4098      	lsls	r0, r3
 8002562:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002564:	4318      	orrs	r0, r3
 8002566:	9041      	str	r0, [sp, #260]	; 0x104
 8002568:	f89a 3000 	ldrb.w	r3, [sl]
 800256c:	f10a 0501 	add.w	r5, sl, #1
 8002570:	2b67      	cmp	r3, #103	; 0x67
 8002572:	d82b      	bhi.n	80025cc <__svfiscanf_r+0x12c>
 8002574:	2b65      	cmp	r3, #101	; 0x65
 8002576:	f080 809f 	bcs.w	80026b8 <__svfiscanf_r+0x218>
 800257a:	2b47      	cmp	r3, #71	; 0x47
 800257c:	d810      	bhi.n	80025a0 <__svfiscanf_r+0x100>
 800257e:	2b45      	cmp	r3, #69	; 0x45
 8002580:	f080 809a 	bcs.w	80026b8 <__svfiscanf_r+0x218>
 8002584:	2b00      	cmp	r3, #0
 8002586:	d06c      	beq.n	8002662 <__svfiscanf_r+0x1c2>
 8002588:	2b25      	cmp	r3, #37	; 0x25
 800258a:	d051      	beq.n	8002630 <__svfiscanf_r+0x190>
 800258c:	2303      	movs	r3, #3
 800258e:	9742      	str	r7, [sp, #264]	; 0x108
 8002590:	9347      	str	r3, [sp, #284]	; 0x11c
 8002592:	e027      	b.n	80025e4 <__svfiscanf_r+0x144>
 8002594:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002596:	fb07 1303 	mla	r3, r7, r3, r1
 800259a:	3b30      	subs	r3, #48	; 0x30
 800259c:	9343      	str	r3, [sp, #268]	; 0x10c
 800259e:	e7cf      	b.n	8002540 <__svfiscanf_r+0xa0>
 80025a0:	2b5b      	cmp	r3, #91	; 0x5b
 80025a2:	d06a      	beq.n	800267a <__svfiscanf_r+0x1da>
 80025a4:	d80c      	bhi.n	80025c0 <__svfiscanf_r+0x120>
 80025a6:	2b58      	cmp	r3, #88	; 0x58
 80025a8:	d1f0      	bne.n	800258c <__svfiscanf_r+0xec>
 80025aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	9241      	str	r2, [sp, #260]	; 0x104
 80025b2:	2210      	movs	r2, #16
 80025b4:	9242      	str	r2, [sp, #264]	; 0x108
 80025b6:	2b6e      	cmp	r3, #110	; 0x6e
 80025b8:	bf8c      	ite	hi
 80025ba:	2304      	movhi	r3, #4
 80025bc:	2303      	movls	r3, #3
 80025be:	e010      	b.n	80025e2 <__svfiscanf_r+0x142>
 80025c0:	2b63      	cmp	r3, #99	; 0x63
 80025c2:	d065      	beq.n	8002690 <__svfiscanf_r+0x1f0>
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d1e1      	bne.n	800258c <__svfiscanf_r+0xec>
 80025c8:	9742      	str	r7, [sp, #264]	; 0x108
 80025ca:	e7f4      	b.n	80025b6 <__svfiscanf_r+0x116>
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d04b      	beq.n	8002668 <__svfiscanf_r+0x1c8>
 80025d0:	d826      	bhi.n	8002620 <__svfiscanf_r+0x180>
 80025d2:	2b6e      	cmp	r3, #110	; 0x6e
 80025d4:	d062      	beq.n	800269c <__svfiscanf_r+0x1fc>
 80025d6:	d84c      	bhi.n	8002672 <__svfiscanf_r+0x1d2>
 80025d8:	2b69      	cmp	r3, #105	; 0x69
 80025da:	d1d7      	bne.n	800258c <__svfiscanf_r+0xec>
 80025dc:	2300      	movs	r3, #0
 80025de:	9342      	str	r3, [sp, #264]	; 0x108
 80025e0:	2303      	movs	r3, #3
 80025e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	dd68      	ble.n	80026bc <__svfiscanf_r+0x21c>
 80025ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80025ec:	0659      	lsls	r1, r3, #25
 80025ee:	d407      	bmi.n	8002600 <__svfiscanf_r+0x160>
 80025f0:	f7ff fc16 	bl	8001e20 <__locale_ctype_ptr>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	4410      	add	r0, r2
 80025fa:	7842      	ldrb	r2, [r0, #1]
 80025fc:	0712      	lsls	r2, r2, #28
 80025fe:	d464      	bmi.n	80026ca <__svfiscanf_r+0x22a>
 8002600:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002602:	2b02      	cmp	r3, #2
 8002604:	dc73      	bgt.n	80026ee <__svfiscanf_r+0x24e>
 8002606:	466b      	mov	r3, sp
 8002608:	4622      	mov	r2, r4
 800260a:	a941      	add	r1, sp, #260	; 0x104
 800260c:	4630      	mov	r0, r6
 800260e:	f000 f8bf 	bl	8002790 <_scanf_chars>
 8002612:	2801      	cmp	r0, #1
 8002614:	f000 8089 	beq.w	800272a <__svfiscanf_r+0x28a>
 8002618:	2802      	cmp	r0, #2
 800261a:	f47f af71 	bne.w	8002500 <__svfiscanf_r+0x60>
 800261e:	e01d      	b.n	800265c <__svfiscanf_r+0x1bc>
 8002620:	2b75      	cmp	r3, #117	; 0x75
 8002622:	d0d1      	beq.n	80025c8 <__svfiscanf_r+0x128>
 8002624:	2b78      	cmp	r3, #120	; 0x78
 8002626:	d0c0      	beq.n	80025aa <__svfiscanf_r+0x10a>
 8002628:	2b73      	cmp	r3, #115	; 0x73
 800262a:	d1af      	bne.n	800258c <__svfiscanf_r+0xec>
 800262c:	2302      	movs	r3, #2
 800262e:	e7d8      	b.n	80025e2 <__svfiscanf_r+0x142>
 8002630:	6863      	ldr	r3, [r4, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	dd0c      	ble.n	8002650 <__svfiscanf_r+0x1b0>
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	781a      	ldrb	r2, [r3, #0]
 800263a:	455a      	cmp	r2, fp
 800263c:	d175      	bne.n	800272a <__svfiscanf_r+0x28a>
 800263e:	3301      	adds	r3, #1
 8002640:	6862      	ldr	r2, [r4, #4]
 8002642:	6023      	str	r3, [r4, #0]
 8002644:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002646:	3a01      	subs	r2, #1
 8002648:	3301      	adds	r3, #1
 800264a:	6062      	str	r2, [r4, #4]
 800264c:	9345      	str	r3, [sp, #276]	; 0x114
 800264e:	e757      	b.n	8002500 <__svfiscanf_r+0x60>
 8002650:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002652:	4621      	mov	r1, r4
 8002654:	4630      	mov	r0, r6
 8002656:	4798      	blx	r3
 8002658:	2800      	cmp	r0, #0
 800265a:	d0ec      	beq.n	8002636 <__svfiscanf_r+0x196>
 800265c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800265e:	2800      	cmp	r0, #0
 8002660:	d159      	bne.n	8002716 <__svfiscanf_r+0x276>
 8002662:	f04f 30ff 	mov.w	r0, #4294967295
 8002666:	e05c      	b.n	8002722 <__svfiscanf_r+0x282>
 8002668:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800266a:	f042 0220 	orr.w	r2, r2, #32
 800266e:	9241      	str	r2, [sp, #260]	; 0x104
 8002670:	e79b      	b.n	80025aa <__svfiscanf_r+0x10a>
 8002672:	2308      	movs	r3, #8
 8002674:	9342      	str	r3, [sp, #264]	; 0x108
 8002676:	2304      	movs	r3, #4
 8002678:	e7b3      	b.n	80025e2 <__svfiscanf_r+0x142>
 800267a:	4629      	mov	r1, r5
 800267c:	4640      	mov	r0, r8
 800267e:	f000 fa85 	bl	8002b8c <__sccl>
 8002682:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002684:	4605      	mov	r5, r0
 8002686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268a:	9341      	str	r3, [sp, #260]	; 0x104
 800268c:	2301      	movs	r3, #1
 800268e:	e7a8      	b.n	80025e2 <__svfiscanf_r+0x142>
 8002690:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002696:	9341      	str	r3, [sp, #260]	; 0x104
 8002698:	2300      	movs	r3, #0
 800269a:	e7a2      	b.n	80025e2 <__svfiscanf_r+0x142>
 800269c:	9841      	ldr	r0, [sp, #260]	; 0x104
 800269e:	06c3      	lsls	r3, r0, #27
 80026a0:	f53f af2e 	bmi.w	8002500 <__svfiscanf_r+0x60>
 80026a4:	9b00      	ldr	r3, [sp, #0]
 80026a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80026a8:	1d19      	adds	r1, r3, #4
 80026aa:	9100      	str	r1, [sp, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	07c0      	lsls	r0, r0, #31
 80026b0:	bf4c      	ite	mi
 80026b2:	801a      	strhmi	r2, [r3, #0]
 80026b4:	601a      	strpl	r2, [r3, #0]
 80026b6:	e723      	b.n	8002500 <__svfiscanf_r+0x60>
 80026b8:	2305      	movs	r3, #5
 80026ba:	e792      	b.n	80025e2 <__svfiscanf_r+0x142>
 80026bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80026be:	4621      	mov	r1, r4
 80026c0:	4630      	mov	r0, r6
 80026c2:	4798      	blx	r3
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d090      	beq.n	80025ea <__svfiscanf_r+0x14a>
 80026c8:	e7c8      	b.n	800265c <__svfiscanf_r+0x1bc>
 80026ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80026cc:	3201      	adds	r2, #1
 80026ce:	9245      	str	r2, [sp, #276]	; 0x114
 80026d0:	6862      	ldr	r2, [r4, #4]
 80026d2:	3a01      	subs	r2, #1
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	6062      	str	r2, [r4, #4]
 80026d8:	dd02      	ble.n	80026e0 <__svfiscanf_r+0x240>
 80026da:	3301      	adds	r3, #1
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	e787      	b.n	80025f0 <__svfiscanf_r+0x150>
 80026e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80026e2:	4621      	mov	r1, r4
 80026e4:	4630      	mov	r0, r6
 80026e6:	4798      	blx	r3
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d081      	beq.n	80025f0 <__svfiscanf_r+0x150>
 80026ec:	e7b6      	b.n	800265c <__svfiscanf_r+0x1bc>
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	dc06      	bgt.n	8002700 <__svfiscanf_r+0x260>
 80026f2:	466b      	mov	r3, sp
 80026f4:	4622      	mov	r2, r4
 80026f6:	a941      	add	r1, sp, #260	; 0x104
 80026f8:	4630      	mov	r0, r6
 80026fa:	f000 f8ab 	bl	8002854 <_scanf_i>
 80026fe:	e788      	b.n	8002612 <__svfiscanf_r+0x172>
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <__svfiscanf_r+0x29c>)
 8002702:	2b00      	cmp	r3, #0
 8002704:	f43f aefc 	beq.w	8002500 <__svfiscanf_r+0x60>
 8002708:	466b      	mov	r3, sp
 800270a:	4622      	mov	r2, r4
 800270c:	a941      	add	r1, sp, #260	; 0x104
 800270e:	4630      	mov	r0, r6
 8002710:	f3af 8000 	nop.w
 8002714:	e77d      	b.n	8002612 <__svfiscanf_r+0x172>
 8002716:	89a3      	ldrh	r3, [r4, #12]
 8002718:	f013 0f40 	tst.w	r3, #64	; 0x40
 800271c:	bf18      	it	ne
 800271e:	f04f 30ff 	movne.w	r0, #4294967295
 8002722:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8002726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800272a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800272c:	e7f9      	b.n	8002722 <__svfiscanf_r+0x282>
 800272e:	bf00      	nop
 8002730:	08002dfd 	.word	0x08002dfd
 8002734:	08002a55 	.word	0x08002a55
 8002738:	08003600 	.word	0x08003600
 800273c:	00000000 	.word	0x00000000

08002740 <_vfiscanf_r>:
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002744:	460c      	mov	r4, r1
 8002746:	4616      	mov	r6, r2
 8002748:	461f      	mov	r7, r3
 800274a:	4605      	mov	r5, r0
 800274c:	b118      	cbz	r0, 8002756 <_vfiscanf_r+0x16>
 800274e:	6983      	ldr	r3, [r0, #24]
 8002750:	b90b      	cbnz	r3, 8002756 <_vfiscanf_r+0x16>
 8002752:	f7ff fabb 	bl	8001ccc <__sinit>
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <_vfiscanf_r+0x44>)
 8002758:	429c      	cmp	r4, r3
 800275a:	d108      	bne.n	800276e <_vfiscanf_r+0x2e>
 800275c:	686c      	ldr	r4, [r5, #4]
 800275e:	463b      	mov	r3, r7
 8002760:	4632      	mov	r2, r6
 8002762:	4621      	mov	r1, r4
 8002764:	4628      	mov	r0, r5
 8002766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276a:	f7ff be99 	b.w	80024a0 <__svfiscanf_r>
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <_vfiscanf_r+0x48>)
 8002770:	429c      	cmp	r4, r3
 8002772:	d101      	bne.n	8002778 <_vfiscanf_r+0x38>
 8002774:	68ac      	ldr	r4, [r5, #8]
 8002776:	e7f2      	b.n	800275e <_vfiscanf_r+0x1e>
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <_vfiscanf_r+0x4c>)
 800277a:	429c      	cmp	r4, r3
 800277c:	bf08      	it	eq
 800277e:	68ec      	ldreq	r4, [r5, #12]
 8002780:	e7ed      	b.n	800275e <_vfiscanf_r+0x1e>
 8002782:	bf00      	nop
 8002784:	080035b0 	.word	0x080035b0
 8002788:	080035d0 	.word	0x080035d0
 800278c:	08003590 	.word	0x08003590

08002790 <_scanf_chars>:
 8002790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002794:	4615      	mov	r5, r2
 8002796:	688a      	ldr	r2, [r1, #8]
 8002798:	4680      	mov	r8, r0
 800279a:	460c      	mov	r4, r1
 800279c:	b932      	cbnz	r2, 80027ac <_scanf_chars+0x1c>
 800279e:	698a      	ldr	r2, [r1, #24]
 80027a0:	2a00      	cmp	r2, #0
 80027a2:	bf14      	ite	ne
 80027a4:	f04f 32ff 	movne.w	r2, #4294967295
 80027a8:	2201      	moveq	r2, #1
 80027aa:	608a      	str	r2, [r1, #8]
 80027ac:	2600      	movs	r6, #0
 80027ae:	6822      	ldr	r2, [r4, #0]
 80027b0:	06d1      	lsls	r1, r2, #27
 80027b2:	bf5f      	itttt	pl
 80027b4:	681a      	ldrpl	r2, [r3, #0]
 80027b6:	1d11      	addpl	r1, r2, #4
 80027b8:	6019      	strpl	r1, [r3, #0]
 80027ba:	6817      	ldrpl	r7, [r2, #0]
 80027bc:	69a3      	ldr	r3, [r4, #24]
 80027be:	b1db      	cbz	r3, 80027f8 <_scanf_chars+0x68>
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <_scanf_chars+0x44>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	6962      	ldr	r2, [r4, #20]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	5cd3      	ldrb	r3, [r2, r3]
 80027cc:	b9a3      	cbnz	r3, 80027f8 <_scanf_chars+0x68>
 80027ce:	2e00      	cmp	r6, #0
 80027d0:	d131      	bne.n	8002836 <_scanf_chars+0xa6>
 80027d2:	e006      	b.n	80027e2 <_scanf_chars+0x52>
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d007      	beq.n	80027e8 <_scanf_chars+0x58>
 80027d8:	2e00      	cmp	r6, #0
 80027da:	d12c      	bne.n	8002836 <_scanf_chars+0xa6>
 80027dc:	69a3      	ldr	r3, [r4, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d129      	bne.n	8002836 <_scanf_chars+0xa6>
 80027e2:	2001      	movs	r0, #1
 80027e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027e8:	f7ff fb1a 	bl	8001e20 <__locale_ctype_ptr>
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4418      	add	r0, r3
 80027f2:	7843      	ldrb	r3, [r0, #1]
 80027f4:	071b      	lsls	r3, r3, #28
 80027f6:	d4ef      	bmi.n	80027d8 <_scanf_chars+0x48>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	3601      	adds	r6, #1
 80027fc:	06da      	lsls	r2, r3, #27
 80027fe:	bf5e      	ittt	pl
 8002800:	682b      	ldrpl	r3, [r5, #0]
 8002802:	781b      	ldrbpl	r3, [r3, #0]
 8002804:	703b      	strbpl	r3, [r7, #0]
 8002806:	682a      	ldr	r2, [r5, #0]
 8002808:	686b      	ldr	r3, [r5, #4]
 800280a:	f102 0201 	add.w	r2, r2, #1
 800280e:	602a      	str	r2, [r5, #0]
 8002810:	68a2      	ldr	r2, [r4, #8]
 8002812:	f103 33ff 	add.w	r3, r3, #4294967295
 8002816:	f102 32ff 	add.w	r2, r2, #4294967295
 800281a:	606b      	str	r3, [r5, #4]
 800281c:	bf58      	it	pl
 800281e:	3701      	addpl	r7, #1
 8002820:	60a2      	str	r2, [r4, #8]
 8002822:	b142      	cbz	r2, 8002836 <_scanf_chars+0xa6>
 8002824:	2b00      	cmp	r3, #0
 8002826:	dcc9      	bgt.n	80027bc <_scanf_chars+0x2c>
 8002828:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800282c:	4629      	mov	r1, r5
 800282e:	4640      	mov	r0, r8
 8002830:	4798      	blx	r3
 8002832:	2800      	cmp	r0, #0
 8002834:	d0c2      	beq.n	80027bc <_scanf_chars+0x2c>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	f013 0310 	ands.w	r3, r3, #16
 800283c:	d105      	bne.n	800284a <_scanf_chars+0xba>
 800283e:	68e2      	ldr	r2, [r4, #12]
 8002840:	3201      	adds	r2, #1
 8002842:	60e2      	str	r2, [r4, #12]
 8002844:	69a2      	ldr	r2, [r4, #24]
 8002846:	b102      	cbz	r2, 800284a <_scanf_chars+0xba>
 8002848:	703b      	strb	r3, [r7, #0]
 800284a:	6923      	ldr	r3, [r4, #16]
 800284c:	2000      	movs	r0, #0
 800284e:	441e      	add	r6, r3
 8002850:	6126      	str	r6, [r4, #16]
 8002852:	e7c7      	b.n	80027e4 <_scanf_chars+0x54>

08002854 <_scanf_i>:
 8002854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002858:	460c      	mov	r4, r1
 800285a:	469a      	mov	sl, r3
 800285c:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <_scanf_i+0x1dc>)
 800285e:	b087      	sub	sp, #28
 8002860:	4683      	mov	fp, r0
 8002862:	4616      	mov	r6, r2
 8002864:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002868:	ab03      	add	r3, sp, #12
 800286a:	68a7      	ldr	r7, [r4, #8]
 800286c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <_scanf_i+0x1e0>)
 8002872:	69a1      	ldr	r1, [r4, #24]
 8002874:	4a70      	ldr	r2, [pc, #448]	; (8002a38 <_scanf_i+0x1e4>)
 8002876:	f104 091c 	add.w	r9, r4, #28
 800287a:	2903      	cmp	r1, #3
 800287c:	bf08      	it	eq
 800287e:	461a      	moveq	r2, r3
 8002880:	1e7b      	subs	r3, r7, #1
 8002882:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8002886:	bf84      	itt	hi
 8002888:	f240 135d 	movwhi	r3, #349	; 0x15d
 800288c:	60a3      	strhi	r3, [r4, #8]
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	bf88      	it	hi
 8002892:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8002896:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	bf98      	it	ls
 800289e:	2700      	movls	r7, #0
 80028a0:	464b      	mov	r3, r9
 80028a2:	f04f 0800 	mov.w	r8, #0
 80028a6:	9200      	str	r2, [sp, #0]
 80028a8:	bf88      	it	hi
 80028aa:	197f      	addhi	r7, r7, r5
 80028ac:	6831      	ldr	r1, [r6, #0]
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	ab03      	add	r3, sp, #12
 80028b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80028b6:	2202      	movs	r2, #2
 80028b8:	7809      	ldrb	r1, [r1, #0]
 80028ba:	f000 fd39 	bl	8003330 <memchr>
 80028be:	9b01      	ldr	r3, [sp, #4]
 80028c0:	b330      	cbz	r0, 8002910 <_scanf_i+0xbc>
 80028c2:	f1b8 0f01 	cmp.w	r8, #1
 80028c6:	d15a      	bne.n	800297e <_scanf_i+0x12a>
 80028c8:	6862      	ldr	r2, [r4, #4]
 80028ca:	b92a      	cbnz	r2, 80028d8 <_scanf_i+0x84>
 80028cc:	2108      	movs	r1, #8
 80028ce:	6822      	ldr	r2, [r4, #0]
 80028d0:	6061      	str	r1, [r4, #4]
 80028d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d6:	6022      	str	r2, [r4, #0]
 80028d8:	6822      	ldr	r2, [r4, #0]
 80028da:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80028de:	6022      	str	r2, [r4, #0]
 80028e0:	68a2      	ldr	r2, [r4, #8]
 80028e2:	1e51      	subs	r1, r2, #1
 80028e4:	60a1      	str	r1, [r4, #8]
 80028e6:	b19a      	cbz	r2, 8002910 <_scanf_i+0xbc>
 80028e8:	6832      	ldr	r2, [r6, #0]
 80028ea:	1c5d      	adds	r5, r3, #1
 80028ec:	1c51      	adds	r1, r2, #1
 80028ee:	6031      	str	r1, [r6, #0]
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	6873      	ldr	r3, [r6, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	6073      	str	r3, [r6, #4]
 80028fc:	dc07      	bgt.n	800290e <_scanf_i+0xba>
 80028fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8002902:	4631      	mov	r1, r6
 8002904:	4658      	mov	r0, fp
 8002906:	4798      	blx	r3
 8002908:	2800      	cmp	r0, #0
 800290a:	f040 8087 	bne.w	8002a1c <_scanf_i+0x1c8>
 800290e:	462b      	mov	r3, r5
 8002910:	f108 0801 	add.w	r8, r8, #1
 8002914:	f1b8 0f03 	cmp.w	r8, #3
 8002918:	d1c8      	bne.n	80028ac <_scanf_i+0x58>
 800291a:	6862      	ldr	r2, [r4, #4]
 800291c:	b90a      	cbnz	r2, 8002922 <_scanf_i+0xce>
 800291e:	220a      	movs	r2, #10
 8002920:	6062      	str	r2, [r4, #4]
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	4945      	ldr	r1, [pc, #276]	; (8002a3c <_scanf_i+0x1e8>)
 8002926:	6960      	ldr	r0, [r4, #20]
 8002928:	1a89      	subs	r1, r1, r2
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f000 f92e 	bl	8002b8c <__sccl>
 8002930:	9b01      	ldr	r3, [sp, #4]
 8002932:	f04f 0800 	mov.w	r8, #0
 8002936:	461d      	mov	r5, r3
 8002938:	68a3      	ldr	r3, [r4, #8]
 800293a:	6822      	ldr	r2, [r4, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d03b      	beq.n	80029b8 <_scanf_i+0x164>
 8002940:	6831      	ldr	r1, [r6, #0]
 8002942:	6960      	ldr	r0, [r4, #20]
 8002944:	f891 c000 	ldrb.w	ip, [r1]
 8002948:	f810 000c 	ldrb.w	r0, [r0, ip]
 800294c:	2800      	cmp	r0, #0
 800294e:	d033      	beq.n	80029b8 <_scanf_i+0x164>
 8002950:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8002954:	d121      	bne.n	800299a <_scanf_i+0x146>
 8002956:	0510      	lsls	r0, r2, #20
 8002958:	d51f      	bpl.n	800299a <_scanf_i+0x146>
 800295a:	f108 0801 	add.w	r8, r8, #1
 800295e:	b117      	cbz	r7, 8002966 <_scanf_i+0x112>
 8002960:	3301      	adds	r3, #1
 8002962:	3f01      	subs	r7, #1
 8002964:	60a3      	str	r3, [r4, #8]
 8002966:	6873      	ldr	r3, [r6, #4]
 8002968:	3b01      	subs	r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	6073      	str	r3, [r6, #4]
 800296e:	dd1c      	ble.n	80029aa <_scanf_i+0x156>
 8002970:	6833      	ldr	r3, [r6, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	6033      	str	r3, [r6, #0]
 8002976:	68a3      	ldr	r3, [r4, #8]
 8002978:	3b01      	subs	r3, #1
 800297a:	60a3      	str	r3, [r4, #8]
 800297c:	e7dc      	b.n	8002938 <_scanf_i+0xe4>
 800297e:	f1b8 0f02 	cmp.w	r8, #2
 8002982:	d1ad      	bne.n	80028e0 <_scanf_i+0x8c>
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800298a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800298e:	d1bf      	bne.n	8002910 <_scanf_i+0xbc>
 8002990:	2110      	movs	r1, #16
 8002992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002996:	6061      	str	r1, [r4, #4]
 8002998:	e7a1      	b.n	80028de <_scanf_i+0x8a>
 800299a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800299e:	6022      	str	r2, [r4, #0]
 80029a0:	780b      	ldrb	r3, [r1, #0]
 80029a2:	3501      	adds	r5, #1
 80029a4:	f805 3c01 	strb.w	r3, [r5, #-1]
 80029a8:	e7dd      	b.n	8002966 <_scanf_i+0x112>
 80029aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80029ae:	4631      	mov	r1, r6
 80029b0:	4658      	mov	r0, fp
 80029b2:	4798      	blx	r3
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0de      	beq.n	8002976 <_scanf_i+0x122>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	05d9      	lsls	r1, r3, #23
 80029bc:	d50c      	bpl.n	80029d8 <_scanf_i+0x184>
 80029be:	454d      	cmp	r5, r9
 80029c0:	d908      	bls.n	80029d4 <_scanf_i+0x180>
 80029c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80029c6:	1e6f      	subs	r7, r5, #1
 80029c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80029cc:	4632      	mov	r2, r6
 80029ce:	4658      	mov	r0, fp
 80029d0:	4798      	blx	r3
 80029d2:	463d      	mov	r5, r7
 80029d4:	454d      	cmp	r5, r9
 80029d6:	d029      	beq.n	8002a2c <_scanf_i+0x1d8>
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	f012 0210 	ands.w	r2, r2, #16
 80029de:	d113      	bne.n	8002a08 <_scanf_i+0x1b4>
 80029e0:	702a      	strb	r2, [r5, #0]
 80029e2:	6863      	ldr	r3, [r4, #4]
 80029e4:	4649      	mov	r1, r9
 80029e6:	4658      	mov	r0, fp
 80029e8:	9e00      	ldr	r6, [sp, #0]
 80029ea:	47b0      	blx	r6
 80029ec:	f8da 3000 	ldr.w	r3, [sl]
 80029f0:	6821      	ldr	r1, [r4, #0]
 80029f2:	1d1a      	adds	r2, r3, #4
 80029f4:	f8ca 2000 	str.w	r2, [sl]
 80029f8:	f011 0f20 	tst.w	r1, #32
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	d010      	beq.n	8002a22 <_scanf_i+0x1ce>
 8002a00:	6018      	str	r0, [r3, #0]
 8002a02:	68e3      	ldr	r3, [r4, #12]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60e3      	str	r3, [r4, #12]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	eba5 0509 	sub.w	r5, r5, r9
 8002a0e:	44a8      	add	r8, r5
 8002a10:	6925      	ldr	r5, [r4, #16]
 8002a12:	4445      	add	r5, r8
 8002a14:	6125      	str	r5, [r4, #16]
 8002a16:	b007      	add	sp, #28
 8002a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1c:	f04f 0800 	mov.w	r8, #0
 8002a20:	e7ca      	b.n	80029b8 <_scanf_i+0x164>
 8002a22:	07ca      	lsls	r2, r1, #31
 8002a24:	bf4c      	ite	mi
 8002a26:	8018      	strhmi	r0, [r3, #0]
 8002a28:	6018      	strpl	r0, [r3, #0]
 8002a2a:	e7ea      	b.n	8002a02 <_scanf_i+0x1ae>
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7f2      	b.n	8002a16 <_scanf_i+0x1c2>
 8002a30:	08003568 	.word	0x08003568
 8002a34:	08001bfd 	.word	0x08001bfd
 8002a38:	08002d69 	.word	0x08002d69
 8002a3c:	0800363d 	.word	0x0800363d

08002a40 <lflush>:
 8002a40:	8983      	ldrh	r3, [r0, #12]
 8002a42:	f003 0309 	and.w	r3, r3, #9
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	d101      	bne.n	8002a4e <lflush+0xe>
 8002a4a:	f000 bbe9 	b.w	8003220 <fflush>
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4770      	bx	lr
	...

08002a54 <__srefill_r>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	460c      	mov	r4, r1
 8002a58:	4605      	mov	r5, r0
 8002a5a:	b118      	cbz	r0, 8002a64 <__srefill_r+0x10>
 8002a5c:	6983      	ldr	r3, [r0, #24]
 8002a5e:	b90b      	cbnz	r3, 8002a64 <__srefill_r+0x10>
 8002a60:	f7ff f934 	bl	8001ccc <__sinit>
 8002a64:	4b3c      	ldr	r3, [pc, #240]	; (8002b58 <__srefill_r+0x104>)
 8002a66:	429c      	cmp	r4, r3
 8002a68:	d10a      	bne.n	8002a80 <__srefill_r+0x2c>
 8002a6a:	686c      	ldr	r4, [r5, #4]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	b293      	uxth	r3, r2
 8002a76:	069e      	lsls	r6, r3, #26
 8002a78:	d50c      	bpl.n	8002a94 <__srefill_r+0x40>
 8002a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7e:	e068      	b.n	8002b52 <__srefill_r+0xfe>
 8002a80:	4b36      	ldr	r3, [pc, #216]	; (8002b5c <__srefill_r+0x108>)
 8002a82:	429c      	cmp	r4, r3
 8002a84:	d101      	bne.n	8002a8a <__srefill_r+0x36>
 8002a86:	68ac      	ldr	r4, [r5, #8]
 8002a88:	e7f0      	b.n	8002a6c <__srefill_r+0x18>
 8002a8a:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <__srefill_r+0x10c>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	bf08      	it	eq
 8002a90:	68ec      	ldreq	r4, [r5, #12]
 8002a92:	e7eb      	b.n	8002a6c <__srefill_r+0x18>
 8002a94:	0758      	lsls	r0, r3, #29
 8002a96:	d44a      	bmi.n	8002b2e <__srefill_r+0xda>
 8002a98:	06d9      	lsls	r1, r3, #27
 8002a9a:	d405      	bmi.n	8002aa8 <__srefill_r+0x54>
 8002a9c:	2309      	movs	r3, #9
 8002a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	81a2      	strh	r2, [r4, #12]
 8002aa6:	e7e8      	b.n	8002a7a <__srefill_r+0x26>
 8002aa8:	071a      	lsls	r2, r3, #28
 8002aaa:	d50b      	bpl.n	8002ac4 <__srefill_r+0x70>
 8002aac:	4621      	mov	r1, r4
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f000 fb8c 	bl	80031cc <_fflush_r>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1e0      	bne.n	8002a7a <__srefill_r+0x26>
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	60a0      	str	r0, [r4, #8]
 8002abc:	f023 0308 	bic.w	r3, r3, #8
 8002ac0:	81a3      	strh	r3, [r4, #12]
 8002ac2:	61a0      	str	r0, [r4, #24]
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	81a3      	strh	r3, [r4, #12]
 8002acc:	6923      	ldr	r3, [r4, #16]
 8002ace:	b91b      	cbnz	r3, 8002ad8 <__srefill_r+0x84>
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f000 fbec 	bl	80032b0 <__smakebuf_r>
 8002ad8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8002adc:	b2be      	uxth	r6, r7
 8002ade:	07b3      	lsls	r3, r6, #30
 8002ae0:	d00f      	beq.n	8002b02 <__srefill_r+0xae>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <__srefill_r+0x110>)
 8002ae8:	491f      	ldr	r1, [pc, #124]	; (8002b68 <__srefill_r+0x114>)
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	f006 0609 	and.w	r6, r6, #9
 8002af0:	f7ff f958 	bl	8001da4 <_fwalk>
 8002af4:	2e09      	cmp	r6, #9
 8002af6:	81a7      	strh	r7, [r4, #12]
 8002af8:	d103      	bne.n	8002b02 <__srefill_r+0xae>
 8002afa:	4621      	mov	r1, r4
 8002afc:	4628      	mov	r0, r5
 8002afe:	f000 fadf 	bl	80030c0 <__sflush_r>
 8002b02:	6922      	ldr	r2, [r4, #16]
 8002b04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002b06:	6022      	str	r2, [r4, #0]
 8002b08:	6963      	ldr	r3, [r4, #20]
 8002b0a:	6a21      	ldr	r1, [r4, #32]
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b0      	blx	r6
 8002b10:	2800      	cmp	r0, #0
 8002b12:	6060      	str	r0, [r4, #4]
 8002b14:	dc1e      	bgt.n	8002b54 <__srefill_r+0x100>
 8002b16:	bf18      	it	ne
 8002b18:	2200      	movne	r2, #0
 8002b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b1e:	bf16      	itet	ne
 8002b20:	6062      	strne	r2, [r4, #4]
 8002b22:	f043 0320 	orreq.w	r3, r3, #32
 8002b26:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8002b2a:	81a3      	strh	r3, [r4, #12]
 8002b2c:	e7a5      	b.n	8002a7a <__srefill_r+0x26>
 8002b2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b30:	2900      	cmp	r1, #0
 8002b32:	d0cb      	beq.n	8002acc <__srefill_r+0x78>
 8002b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b38:	4299      	cmp	r1, r3
 8002b3a:	d002      	beq.n	8002b42 <__srefill_r+0xee>
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 fc13 	bl	8003368 <_free_r>
 8002b42:	2000      	movs	r0, #0
 8002b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b46:	6360      	str	r0, [r4, #52]	; 0x34
 8002b48:	6063      	str	r3, [r4, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0be      	beq.n	8002acc <__srefill_r+0x78>
 8002b4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b54:	2000      	movs	r0, #0
 8002b56:	e7fc      	b.n	8002b52 <__srefill_r+0xfe>
 8002b58:	080035b0 	.word	0x080035b0
 8002b5c:	080035d0 	.word	0x080035d0
 8002b60:	08003590 	.word	0x08003590
 8002b64:	0800358c 	.word	0x0800358c
 8002b68:	08002a41 	.word	0x08002a41

08002b6c <_sbrk_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4c05      	ldr	r4, [pc, #20]	; (8002b88 <_sbrk_r+0x1c>)
 8002b72:	4605      	mov	r5, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	6023      	str	r3, [r4, #0]
 8002b78:	f7fd fd24 	bl	80005c4 <_sbrk>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_sbrk_r+0x1a>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_sbrk_r+0x1a>
 8002b84:	602b      	str	r3, [r5, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	20000248 	.word	0x20000248

08002b8c <__sccl>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	780b      	ldrb	r3, [r1, #0]
 8002b90:	1e44      	subs	r4, r0, #1
 8002b92:	2b5e      	cmp	r3, #94	; 0x5e
 8002b94:	bf13      	iteet	ne
 8002b96:	1c4a      	addne	r2, r1, #1
 8002b98:	1c8a      	addeq	r2, r1, #2
 8002b9a:	784b      	ldrbeq	r3, [r1, #1]
 8002b9c:	2100      	movne	r1, #0
 8002b9e:	bf08      	it	eq
 8002ba0:	2101      	moveq	r1, #1
 8002ba2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8002ba6:	f804 1f01 	strb.w	r1, [r4, #1]!
 8002baa:	42ac      	cmp	r4, r5
 8002bac:	d1fb      	bne.n	8002ba6 <__sccl+0x1a>
 8002bae:	b913      	cbnz	r3, 8002bb6 <__sccl+0x2a>
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	bd70      	pop	{r4, r5, r6, pc}
 8002bb6:	f081 0401 	eor.w	r4, r1, #1
 8002bba:	54c4      	strb	r4, [r0, r3]
 8002bbc:	1c51      	adds	r1, r2, #1
 8002bbe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8002bc2:	1e4e      	subs	r6, r1, #1
 8002bc4:	2d2d      	cmp	r5, #45	; 0x2d
 8002bc6:	460a      	mov	r2, r1
 8002bc8:	d006      	beq.n	8002bd8 <__sccl+0x4c>
 8002bca:	2d5d      	cmp	r5, #93	; 0x5d
 8002bcc:	d0f1      	beq.n	8002bb2 <__sccl+0x26>
 8002bce:	b90d      	cbnz	r5, 8002bd4 <__sccl+0x48>
 8002bd0:	4632      	mov	r2, r6
 8002bd2:	e7ee      	b.n	8002bb2 <__sccl+0x26>
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	e7f0      	b.n	8002bba <__sccl+0x2e>
 8002bd8:	780e      	ldrb	r6, [r1, #0]
 8002bda:	2e5d      	cmp	r6, #93	; 0x5d
 8002bdc:	d0fa      	beq.n	8002bd4 <__sccl+0x48>
 8002bde:	42b3      	cmp	r3, r6
 8002be0:	dcf8      	bgt.n	8002bd4 <__sccl+0x48>
 8002be2:	3301      	adds	r3, #1
 8002be4:	429e      	cmp	r6, r3
 8002be6:	54c4      	strb	r4, [r0, r3]
 8002be8:	dcfb      	bgt.n	8002be2 <__sccl+0x56>
 8002bea:	3102      	adds	r1, #2
 8002bec:	e7e7      	b.n	8002bbe <__sccl+0x32>

08002bee <__sread>:
 8002bee:	b510      	push	{r4, lr}
 8002bf0:	460c      	mov	r4, r1
 8002bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bf6:	f000 fc29 	bl	800344c <_read_r>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	bfab      	itete	ge
 8002bfe:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c00:	89a3      	ldrhlt	r3, [r4, #12]
 8002c02:	181b      	addge	r3, r3, r0
 8002c04:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c08:	bfac      	ite	ge
 8002c0a:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c0c:	81a3      	strhlt	r3, [r4, #12]
 8002c0e:	bd10      	pop	{r4, pc}

08002c10 <__swrite>:
 8002c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	461f      	mov	r7, r3
 8002c16:	898b      	ldrh	r3, [r1, #12]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	05db      	lsls	r3, r3, #23
 8002c1c:	460c      	mov	r4, r1
 8002c1e:	4616      	mov	r6, r2
 8002c20:	d505      	bpl.n	8002c2e <__swrite+0x1e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	2200      	movs	r2, #0
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 fb0b 	bl	8003244 <_lseek_r>
 8002c2e:	89a3      	ldrh	r3, [r4, #12]
 8002c30:	4632      	mov	r2, r6
 8002c32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c36:	81a3      	strh	r3, [r4, #12]
 8002c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3c:	463b      	mov	r3, r7
 8002c3e:	4628      	mov	r0, r5
 8002c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	f000 b9ac 	b.w	8002fa0 <_write_r>

08002c48 <__sseek>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c50:	f000 faf8 	bl	8003244 <_lseek_r>
 8002c54:	1c43      	adds	r3, r0, #1
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	bf15      	itete	ne
 8002c5a:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c5c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c60:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c64:	81a3      	strheq	r3, [r4, #12]
 8002c66:	bf18      	it	ne
 8002c68:	81a3      	strhne	r3, [r4, #12]
 8002c6a:	bd10      	pop	{r4, pc}

08002c6c <__sclose>:
 8002c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c70:	f000 ba16 	b.w	80030a0 <_close_r>

08002c74 <_strtoul_l.isra.0>:
 8002c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c78:	4680      	mov	r8, r0
 8002c7a:	4689      	mov	r9, r1
 8002c7c:	4692      	mov	sl, r2
 8002c7e:	461e      	mov	r6, r3
 8002c80:	460f      	mov	r7, r1
 8002c82:	463d      	mov	r5, r7
 8002c84:	9808      	ldr	r0, [sp, #32]
 8002c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002c8a:	f7ff f8c5 	bl	8001e18 <__locale_ctype_ptr_l>
 8002c8e:	4420      	add	r0, r4
 8002c90:	7843      	ldrb	r3, [r0, #1]
 8002c92:	f013 0308 	ands.w	r3, r3, #8
 8002c96:	d130      	bne.n	8002cfa <_strtoul_l.isra.0+0x86>
 8002c98:	2c2d      	cmp	r4, #45	; 0x2d
 8002c9a:	d130      	bne.n	8002cfe <_strtoul_l.isra.0+0x8a>
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	787c      	ldrb	r4, [r7, #1]
 8002ca0:	1cbd      	adds	r5, r7, #2
 8002ca2:	2e00      	cmp	r6, #0
 8002ca4:	d05c      	beq.n	8002d60 <_strtoul_l.isra.0+0xec>
 8002ca6:	2e10      	cmp	r6, #16
 8002ca8:	d109      	bne.n	8002cbe <_strtoul_l.isra.0+0x4a>
 8002caa:	2c30      	cmp	r4, #48	; 0x30
 8002cac:	d107      	bne.n	8002cbe <_strtoul_l.isra.0+0x4a>
 8002cae:	782b      	ldrb	r3, [r5, #0]
 8002cb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002cb4:	2b58      	cmp	r3, #88	; 0x58
 8002cb6:	d14e      	bne.n	8002d56 <_strtoul_l.isra.0+0xe2>
 8002cb8:	2610      	movs	r6, #16
 8002cba:	786c      	ldrb	r4, [r5, #1]
 8002cbc:	3502      	adds	r5, #2
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc2:	fbb2 f2f6 	udiv	r2, r2, r6
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	fb06 fc02 	mul.w	ip, r6, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	ea6f 0c0c 	mvn.w	ip, ip
 8002cd2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8002cd6:	2f09      	cmp	r7, #9
 8002cd8:	d817      	bhi.n	8002d0a <_strtoul_l.isra.0+0x96>
 8002cda:	463c      	mov	r4, r7
 8002cdc:	42a6      	cmp	r6, r4
 8002cde:	dd23      	ble.n	8002d28 <_strtoul_l.isra.0+0xb4>
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	db1e      	blt.n	8002d22 <_strtoul_l.isra.0+0xae>
 8002ce4:	4282      	cmp	r2, r0
 8002ce6:	d31c      	bcc.n	8002d22 <_strtoul_l.isra.0+0xae>
 8002ce8:	d101      	bne.n	8002cee <_strtoul_l.isra.0+0x7a>
 8002cea:	45a4      	cmp	ip, r4
 8002cec:	db19      	blt.n	8002d22 <_strtoul_l.isra.0+0xae>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	fb00 4006 	mla	r0, r0, r6, r4
 8002cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002cf8:	e7eb      	b.n	8002cd2 <_strtoul_l.isra.0+0x5e>
 8002cfa:	462f      	mov	r7, r5
 8002cfc:	e7c1      	b.n	8002c82 <_strtoul_l.isra.0+0xe>
 8002cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8002d00:	bf04      	itt	eq
 8002d02:	1cbd      	addeq	r5, r7, #2
 8002d04:	787c      	ldrbeq	r4, [r7, #1]
 8002d06:	4619      	mov	r1, r3
 8002d08:	e7cb      	b.n	8002ca2 <_strtoul_l.isra.0+0x2e>
 8002d0a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8002d0e:	2f19      	cmp	r7, #25
 8002d10:	d801      	bhi.n	8002d16 <_strtoul_l.isra.0+0xa2>
 8002d12:	3c37      	subs	r4, #55	; 0x37
 8002d14:	e7e2      	b.n	8002cdc <_strtoul_l.isra.0+0x68>
 8002d16:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8002d1a:	2f19      	cmp	r7, #25
 8002d1c:	d804      	bhi.n	8002d28 <_strtoul_l.isra.0+0xb4>
 8002d1e:	3c57      	subs	r4, #87	; 0x57
 8002d20:	e7dc      	b.n	8002cdc <_strtoul_l.isra.0+0x68>
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	e7e5      	b.n	8002cf4 <_strtoul_l.isra.0+0x80>
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da09      	bge.n	8002d40 <_strtoul_l.isra.0+0xcc>
 8002d2c:	2322      	movs	r3, #34	; 0x22
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d32:	f8c8 3000 	str.w	r3, [r8]
 8002d36:	f1ba 0f00 	cmp.w	sl, #0
 8002d3a:	d107      	bne.n	8002d4c <_strtoul_l.isra.0+0xd8>
 8002d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d40:	b101      	cbz	r1, 8002d44 <_strtoul_l.isra.0+0xd0>
 8002d42:	4240      	negs	r0, r0
 8002d44:	f1ba 0f00 	cmp.w	sl, #0
 8002d48:	d0f8      	beq.n	8002d3c <_strtoul_l.isra.0+0xc8>
 8002d4a:	b10b      	cbz	r3, 8002d50 <_strtoul_l.isra.0+0xdc>
 8002d4c:	f105 39ff 	add.w	r9, r5, #4294967295
 8002d50:	f8ca 9000 	str.w	r9, [sl]
 8002d54:	e7f2      	b.n	8002d3c <_strtoul_l.isra.0+0xc8>
 8002d56:	2430      	movs	r4, #48	; 0x30
 8002d58:	2e00      	cmp	r6, #0
 8002d5a:	d1b0      	bne.n	8002cbe <_strtoul_l.isra.0+0x4a>
 8002d5c:	2608      	movs	r6, #8
 8002d5e:	e7ae      	b.n	8002cbe <_strtoul_l.isra.0+0x4a>
 8002d60:	2c30      	cmp	r4, #48	; 0x30
 8002d62:	d0a4      	beq.n	8002cae <_strtoul_l.isra.0+0x3a>
 8002d64:	260a      	movs	r6, #10
 8002d66:	e7aa      	b.n	8002cbe <_strtoul_l.isra.0+0x4a>

08002d68 <_strtoul_r>:
 8002d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d6a:	4c06      	ldr	r4, [pc, #24]	; (8002d84 <_strtoul_r+0x1c>)
 8002d6c:	4d06      	ldr	r5, [pc, #24]	; (8002d88 <_strtoul_r+0x20>)
 8002d6e:	6824      	ldr	r4, [r4, #0]
 8002d70:	6a24      	ldr	r4, [r4, #32]
 8002d72:	2c00      	cmp	r4, #0
 8002d74:	bf08      	it	eq
 8002d76:	462c      	moveq	r4, r5
 8002d78:	9400      	str	r4, [sp, #0]
 8002d7a:	f7ff ff7b 	bl	8002c74 <_strtoul_l.isra.0>
 8002d7e:	b003      	add	sp, #12
 8002d80:	bd30      	pop	{r4, r5, pc}
 8002d82:	bf00      	nop
 8002d84:	2000000c 	.word	0x2000000c
 8002d88:	20000070 	.word	0x20000070

08002d8c <__submore>:
 8002d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d90:	460c      	mov	r4, r1
 8002d92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	d11b      	bne.n	8002dd4 <__submore+0x48>
 8002d9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002da0:	f7ff f85e 	bl	8001e60 <_malloc_r>
 8002da4:	b918      	cbnz	r0, 8002dae <__submore+0x22>
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db2:	63a3      	str	r3, [r4, #56]	; 0x38
 8002db4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002db8:	6360      	str	r0, [r4, #52]	; 0x34
 8002dba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8002dbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002dc2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8002dc6:	7043      	strb	r3, [r0, #1]
 8002dc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002dcc:	7003      	strb	r3, [r0, #0]
 8002dce:	6020      	str	r0, [r4, #0]
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	e7ea      	b.n	8002daa <__submore+0x1e>
 8002dd4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002dd6:	0077      	lsls	r7, r6, #1
 8002dd8:	463a      	mov	r2, r7
 8002dda:	f000 fb11 	bl	8003400 <_realloc_r>
 8002dde:	4605      	mov	r5, r0
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d0e0      	beq.n	8002da6 <__submore+0x1a>
 8002de4:	eb00 0806 	add.w	r8, r0, r6
 8002de8:	4601      	mov	r1, r0
 8002dea:	4632      	mov	r2, r6
 8002dec:	4640      	mov	r0, r8
 8002dee:	f000 faad 	bl	800334c <memcpy>
 8002df2:	f8c4 8000 	str.w	r8, [r4]
 8002df6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8002dfa:	e7e9      	b.n	8002dd0 <__submore+0x44>

08002dfc <_ungetc_r>:
 8002dfc:	1c4b      	adds	r3, r1, #1
 8002dfe:	b570      	push	{r4, r5, r6, lr}
 8002e00:	4606      	mov	r6, r0
 8002e02:	460d      	mov	r5, r1
 8002e04:	4614      	mov	r4, r2
 8002e06:	d103      	bne.n	8002e10 <_ungetc_r+0x14>
 8002e08:	f04f 35ff 	mov.w	r5, #4294967295
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	b118      	cbz	r0, 8002e1a <_ungetc_r+0x1e>
 8002e12:	6983      	ldr	r3, [r0, #24]
 8002e14:	b90b      	cbnz	r3, 8002e1a <_ungetc_r+0x1e>
 8002e16:	f7fe ff59 	bl	8001ccc <__sinit>
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <_ungetc_r+0xd8>)
 8002e1c:	429c      	cmp	r4, r3
 8002e1e:	d12c      	bne.n	8002e7a <_ungetc_r+0x7e>
 8002e20:	6874      	ldr	r4, [r6, #4]
 8002e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e26:	f023 0320 	bic.w	r3, r3, #32
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	0759      	lsls	r1, r3, #29
 8002e30:	d413      	bmi.n	8002e5a <_ungetc_r+0x5e>
 8002e32:	06da      	lsls	r2, r3, #27
 8002e34:	d5e8      	bpl.n	8002e08 <_ungetc_r+0xc>
 8002e36:	071b      	lsls	r3, r3, #28
 8002e38:	d50b      	bpl.n	8002e52 <_ungetc_r+0x56>
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	4630      	mov	r0, r6
 8002e3e:	f000 f9c5 	bl	80031cc <_fflush_r>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d1e0      	bne.n	8002e08 <_ungetc_r+0xc>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	60a0      	str	r0, [r4, #8]
 8002e4a:	f023 0308 	bic.w	r3, r3, #8
 8002e4e:	81a3      	strh	r3, [r4, #12]
 8002e50:	61a0      	str	r0, [r4, #24]
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e5c:	b2ed      	uxtb	r5, r5
 8002e5e:	6862      	ldr	r2, [r4, #4]
 8002e60:	b1e3      	cbz	r3, 8002e9c <_ungetc_r+0xa0>
 8002e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e64:	4293      	cmp	r3, r2
 8002e66:	dd12      	ble.n	8002e8e <_ungetc_r+0x92>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	6022      	str	r2, [r4, #0]
 8002e6e:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002e72:	6863      	ldr	r3, [r4, #4]
 8002e74:	3301      	adds	r3, #1
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	e7c8      	b.n	8002e0c <_ungetc_r+0x10>
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <_ungetc_r+0xdc>)
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	d101      	bne.n	8002e84 <_ungetc_r+0x88>
 8002e80:	68b4      	ldr	r4, [r6, #8]
 8002e82:	e7ce      	b.n	8002e22 <_ungetc_r+0x26>
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <_ungetc_r+0xe0>)
 8002e86:	429c      	cmp	r4, r3
 8002e88:	bf08      	it	eq
 8002e8a:	68f4      	ldreq	r4, [r6, #12]
 8002e8c:	e7c9      	b.n	8002e22 <_ungetc_r+0x26>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4630      	mov	r0, r6
 8002e92:	f7ff ff7b 	bl	8002d8c <__submore>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d0e6      	beq.n	8002e68 <_ungetc_r+0x6c>
 8002e9a:	e7b5      	b.n	8002e08 <_ungetc_r+0xc>
 8002e9c:	6921      	ldr	r1, [r4, #16]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	b151      	cbz	r1, 8002eb8 <_ungetc_r+0xbc>
 8002ea2:	4299      	cmp	r1, r3
 8002ea4:	d208      	bcs.n	8002eb8 <_ungetc_r+0xbc>
 8002ea6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002eaa:	42a9      	cmp	r1, r5
 8002eac:	d104      	bne.n	8002eb8 <_ungetc_r+0xbc>
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	3201      	adds	r2, #1
 8002eb2:	6023      	str	r3, [r4, #0]
 8002eb4:	6062      	str	r2, [r4, #4]
 8002eb6:	e7a9      	b.n	8002e0c <_ungetc_r+0x10>
 8002eb8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ec0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ec6:	4623      	mov	r3, r4
 8002ec8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e7d1      	b.n	8002e76 <_ungetc_r+0x7a>
 8002ed2:	bf00      	nop
 8002ed4:	080035b0 	.word	0x080035b0
 8002ed8:	080035d0 	.word	0x080035d0
 8002edc:	08003590 	.word	0x08003590

08002ee0 <__swbuf_r>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	460e      	mov	r6, r1
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	b118      	cbz	r0, 8002ef2 <__swbuf_r+0x12>
 8002eea:	6983      	ldr	r3, [r0, #24]
 8002eec:	b90b      	cbnz	r3, 8002ef2 <__swbuf_r+0x12>
 8002eee:	f7fe feed 	bl	8001ccc <__sinit>
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <__swbuf_r+0x98>)
 8002ef4:	429c      	cmp	r4, r3
 8002ef6:	d12a      	bne.n	8002f4e <__swbuf_r+0x6e>
 8002ef8:	686c      	ldr	r4, [r5, #4]
 8002efa:	69a3      	ldr	r3, [r4, #24]
 8002efc:	60a3      	str	r3, [r4, #8]
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	071a      	lsls	r2, r3, #28
 8002f02:	d52e      	bpl.n	8002f62 <__swbuf_r+0x82>
 8002f04:	6923      	ldr	r3, [r4, #16]
 8002f06:	b363      	cbz	r3, 8002f62 <__swbuf_r+0x82>
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	b2f6      	uxtb	r6, r6
 8002f0e:	1ac0      	subs	r0, r0, r3
 8002f10:	6963      	ldr	r3, [r4, #20]
 8002f12:	4637      	mov	r7, r6
 8002f14:	4283      	cmp	r3, r0
 8002f16:	dc04      	bgt.n	8002f22 <__swbuf_r+0x42>
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 f956 	bl	80031cc <_fflush_r>
 8002f20:	bb28      	cbnz	r0, 8002f6e <__swbuf_r+0x8e>
 8002f22:	68a3      	ldr	r3, [r4, #8]
 8002f24:	3001      	adds	r0, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	60a3      	str	r3, [r4, #8]
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	701e      	strb	r6, [r3, #0]
 8002f32:	6963      	ldr	r3, [r4, #20]
 8002f34:	4283      	cmp	r3, r0
 8002f36:	d004      	beq.n	8002f42 <__swbuf_r+0x62>
 8002f38:	89a3      	ldrh	r3, [r4, #12]
 8002f3a:	07db      	lsls	r3, r3, #31
 8002f3c:	d519      	bpl.n	8002f72 <__swbuf_r+0x92>
 8002f3e:	2e0a      	cmp	r6, #10
 8002f40:	d117      	bne.n	8002f72 <__swbuf_r+0x92>
 8002f42:	4621      	mov	r1, r4
 8002f44:	4628      	mov	r0, r5
 8002f46:	f000 f941 	bl	80031cc <_fflush_r>
 8002f4a:	b190      	cbz	r0, 8002f72 <__swbuf_r+0x92>
 8002f4c:	e00f      	b.n	8002f6e <__swbuf_r+0x8e>
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <__swbuf_r+0x9c>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d101      	bne.n	8002f58 <__swbuf_r+0x78>
 8002f54:	68ac      	ldr	r4, [r5, #8]
 8002f56:	e7d0      	b.n	8002efa <__swbuf_r+0x1a>
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <__swbuf_r+0xa0>)
 8002f5a:	429c      	cmp	r4, r3
 8002f5c:	bf08      	it	eq
 8002f5e:	68ec      	ldreq	r4, [r5, #12]
 8002f60:	e7cb      	b.n	8002efa <__swbuf_r+0x1a>
 8002f62:	4621      	mov	r1, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f000 f82d 	bl	8002fc4 <__swsetup_r>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d0cc      	beq.n	8002f08 <__swbuf_r+0x28>
 8002f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8002f72:	4638      	mov	r0, r7
 8002f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	080035b0 	.word	0x080035b0
 8002f7c:	080035d0 	.word	0x080035d0
 8002f80:	08003590 	.word	0x08003590

08002f84 <__ascii_wctomb>:
 8002f84:	b149      	cbz	r1, 8002f9a <__ascii_wctomb+0x16>
 8002f86:	2aff      	cmp	r2, #255	; 0xff
 8002f88:	bf8b      	itete	hi
 8002f8a:	238a      	movhi	r3, #138	; 0x8a
 8002f8c:	700a      	strbls	r2, [r1, #0]
 8002f8e:	6003      	strhi	r3, [r0, #0]
 8002f90:	2001      	movls	r0, #1
 8002f92:	bf88      	it	hi
 8002f94:	f04f 30ff 	movhi.w	r0, #4294967295
 8002f98:	4770      	bx	lr
 8002f9a:	4608      	mov	r0, r1
 8002f9c:	4770      	bx	lr
	...

08002fa0 <_write_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4c05      	ldr	r4, [pc, #20]	; (8002fc0 <_write_r+0x20>)
 8002fac:	6022      	str	r2, [r4, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f7fd fa62 	bl	8000478 <_write>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d102      	bne.n	8002fbe <_write_r+0x1e>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	b103      	cbz	r3, 8002fbe <_write_r+0x1e>
 8002fbc:	602b      	str	r3, [r5, #0]
 8002fbe:	bd38      	pop	{r3, r4, r5, pc}
 8002fc0:	20000248 	.word	0x20000248

08002fc4 <__swsetup_r>:
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <__swsetup_r+0xcc>)
 8002fc6:	b570      	push	{r4, r5, r6, lr}
 8002fc8:	681d      	ldr	r5, [r3, #0]
 8002fca:	4606      	mov	r6, r0
 8002fcc:	460c      	mov	r4, r1
 8002fce:	b125      	cbz	r5, 8002fda <__swsetup_r+0x16>
 8002fd0:	69ab      	ldr	r3, [r5, #24]
 8002fd2:	b913      	cbnz	r3, 8002fda <__swsetup_r+0x16>
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	f7fe fe79 	bl	8001ccc <__sinit>
 8002fda:	4b2e      	ldr	r3, [pc, #184]	; (8003094 <__swsetup_r+0xd0>)
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	d10f      	bne.n	8003000 <__swsetup_r+0x3c>
 8002fe0:	686c      	ldr	r4, [r5, #4]
 8002fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	0715      	lsls	r5, r2, #28
 8002fea:	d42c      	bmi.n	8003046 <__swsetup_r+0x82>
 8002fec:	06d0      	lsls	r0, r2, #27
 8002fee:	d411      	bmi.n	8003014 <__swsetup_r+0x50>
 8002ff0:	2209      	movs	r2, #9
 8002ff2:	6032      	str	r2, [r6, #0]
 8002ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff8:	81a3      	strh	r3, [r4, #12]
 8002ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffe:	e03e      	b.n	800307e <__swsetup_r+0xba>
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <__swsetup_r+0xd4>)
 8003002:	429c      	cmp	r4, r3
 8003004:	d101      	bne.n	800300a <__swsetup_r+0x46>
 8003006:	68ac      	ldr	r4, [r5, #8]
 8003008:	e7eb      	b.n	8002fe2 <__swsetup_r+0x1e>
 800300a:	4b24      	ldr	r3, [pc, #144]	; (800309c <__swsetup_r+0xd8>)
 800300c:	429c      	cmp	r4, r3
 800300e:	bf08      	it	eq
 8003010:	68ec      	ldreq	r4, [r5, #12]
 8003012:	e7e6      	b.n	8002fe2 <__swsetup_r+0x1e>
 8003014:	0751      	lsls	r1, r2, #29
 8003016:	d512      	bpl.n	800303e <__swsetup_r+0x7a>
 8003018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800301a:	b141      	cbz	r1, 800302e <__swsetup_r+0x6a>
 800301c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003020:	4299      	cmp	r1, r3
 8003022:	d002      	beq.n	800302a <__swsetup_r+0x66>
 8003024:	4630      	mov	r0, r6
 8003026:	f000 f99f 	bl	8003368 <_free_r>
 800302a:	2300      	movs	r3, #0
 800302c:	6363      	str	r3, [r4, #52]	; 0x34
 800302e:	89a3      	ldrh	r3, [r4, #12]
 8003030:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003034:	81a3      	strh	r3, [r4, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	6063      	str	r3, [r4, #4]
 800303a:	6923      	ldr	r3, [r4, #16]
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	81a3      	strh	r3, [r4, #12]
 8003046:	6923      	ldr	r3, [r4, #16]
 8003048:	b94b      	cbnz	r3, 800305e <__swsetup_r+0x9a>
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003054:	d003      	beq.n	800305e <__swsetup_r+0x9a>
 8003056:	4621      	mov	r1, r4
 8003058:	4630      	mov	r0, r6
 800305a:	f000 f929 	bl	80032b0 <__smakebuf_r>
 800305e:	89a2      	ldrh	r2, [r4, #12]
 8003060:	f012 0301 	ands.w	r3, r2, #1
 8003064:	d00c      	beq.n	8003080 <__swsetup_r+0xbc>
 8003066:	2300      	movs	r3, #0
 8003068:	60a3      	str	r3, [r4, #8]
 800306a:	6963      	ldr	r3, [r4, #20]
 800306c:	425b      	negs	r3, r3
 800306e:	61a3      	str	r3, [r4, #24]
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	b953      	cbnz	r3, 800308a <__swsetup_r+0xc6>
 8003074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003078:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800307c:	d1ba      	bne.n	8002ff4 <__swsetup_r+0x30>
 800307e:	bd70      	pop	{r4, r5, r6, pc}
 8003080:	0792      	lsls	r2, r2, #30
 8003082:	bf58      	it	pl
 8003084:	6963      	ldrpl	r3, [r4, #20]
 8003086:	60a3      	str	r3, [r4, #8]
 8003088:	e7f2      	b.n	8003070 <__swsetup_r+0xac>
 800308a:	2000      	movs	r0, #0
 800308c:	e7f7      	b.n	800307e <__swsetup_r+0xba>
 800308e:	bf00      	nop
 8003090:	2000000c 	.word	0x2000000c
 8003094:	080035b0 	.word	0x080035b0
 8003098:	080035d0 	.word	0x080035d0
 800309c:	08003590 	.word	0x08003590

080030a0 <_close_r>:
 80030a0:	b538      	push	{r3, r4, r5, lr}
 80030a2:	2300      	movs	r3, #0
 80030a4:	4c05      	ldr	r4, [pc, #20]	; (80030bc <_close_r+0x1c>)
 80030a6:	4605      	mov	r5, r0
 80030a8:	4608      	mov	r0, r1
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	f7fd fa5a 	bl	8000564 <_close>
 80030b0:	1c43      	adds	r3, r0, #1
 80030b2:	d102      	bne.n	80030ba <_close_r+0x1a>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	b103      	cbz	r3, 80030ba <_close_r+0x1a>
 80030b8:	602b      	str	r3, [r5, #0]
 80030ba:	bd38      	pop	{r3, r4, r5, pc}
 80030bc:	20000248 	.word	0x20000248

080030c0 <__sflush_r>:
 80030c0:	898a      	ldrh	r2, [r1, #12]
 80030c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c6:	4605      	mov	r5, r0
 80030c8:	0710      	lsls	r0, r2, #28
 80030ca:	460c      	mov	r4, r1
 80030cc:	d458      	bmi.n	8003180 <__sflush_r+0xc0>
 80030ce:	684b      	ldr	r3, [r1, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	dc05      	bgt.n	80030e0 <__sflush_r+0x20>
 80030d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	dc02      	bgt.n	80030e0 <__sflush_r+0x20>
 80030da:	2000      	movs	r0, #0
 80030dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d0f9      	beq.n	80030da <__sflush_r+0x1a>
 80030e6:	2300      	movs	r3, #0
 80030e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030ec:	682f      	ldr	r7, [r5, #0]
 80030ee:	6a21      	ldr	r1, [r4, #32]
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	d032      	beq.n	800315a <__sflush_r+0x9a>
 80030f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	075a      	lsls	r2, r3, #29
 80030fa:	d505      	bpl.n	8003108 <__sflush_r+0x48>
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	1ac0      	subs	r0, r0, r3
 8003100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003102:	b10b      	cbz	r3, 8003108 <__sflush_r+0x48>
 8003104:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003106:	1ac0      	subs	r0, r0, r3
 8003108:	2300      	movs	r3, #0
 800310a:	4602      	mov	r2, r0
 800310c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800310e:	6a21      	ldr	r1, [r4, #32]
 8003110:	4628      	mov	r0, r5
 8003112:	47b0      	blx	r6
 8003114:	1c43      	adds	r3, r0, #1
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	d106      	bne.n	8003128 <__sflush_r+0x68>
 800311a:	6829      	ldr	r1, [r5, #0]
 800311c:	291d      	cmp	r1, #29
 800311e:	d848      	bhi.n	80031b2 <__sflush_r+0xf2>
 8003120:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <__sflush_r+0x108>)
 8003122:	40ca      	lsrs	r2, r1
 8003124:	07d6      	lsls	r6, r2, #31
 8003126:	d544      	bpl.n	80031b2 <__sflush_r+0xf2>
 8003128:	2200      	movs	r2, #0
 800312a:	6062      	str	r2, [r4, #4]
 800312c:	6922      	ldr	r2, [r4, #16]
 800312e:	04d9      	lsls	r1, r3, #19
 8003130:	6022      	str	r2, [r4, #0]
 8003132:	d504      	bpl.n	800313e <__sflush_r+0x7e>
 8003134:	1c42      	adds	r2, r0, #1
 8003136:	d101      	bne.n	800313c <__sflush_r+0x7c>
 8003138:	682b      	ldr	r3, [r5, #0]
 800313a:	b903      	cbnz	r3, 800313e <__sflush_r+0x7e>
 800313c:	6560      	str	r0, [r4, #84]	; 0x54
 800313e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003140:	602f      	str	r7, [r5, #0]
 8003142:	2900      	cmp	r1, #0
 8003144:	d0c9      	beq.n	80030da <__sflush_r+0x1a>
 8003146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314a:	4299      	cmp	r1, r3
 800314c:	d002      	beq.n	8003154 <__sflush_r+0x94>
 800314e:	4628      	mov	r0, r5
 8003150:	f000 f90a 	bl	8003368 <_free_r>
 8003154:	2000      	movs	r0, #0
 8003156:	6360      	str	r0, [r4, #52]	; 0x34
 8003158:	e7c0      	b.n	80030dc <__sflush_r+0x1c>
 800315a:	2301      	movs	r3, #1
 800315c:	4628      	mov	r0, r5
 800315e:	47b0      	blx	r6
 8003160:	1c41      	adds	r1, r0, #1
 8003162:	d1c8      	bne.n	80030f6 <__sflush_r+0x36>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0c5      	beq.n	80030f6 <__sflush_r+0x36>
 800316a:	2b1d      	cmp	r3, #29
 800316c:	d001      	beq.n	8003172 <__sflush_r+0xb2>
 800316e:	2b16      	cmp	r3, #22
 8003170:	d101      	bne.n	8003176 <__sflush_r+0xb6>
 8003172:	602f      	str	r7, [r5, #0]
 8003174:	e7b1      	b.n	80030da <__sflush_r+0x1a>
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	e7ad      	b.n	80030dc <__sflush_r+0x1c>
 8003180:	690f      	ldr	r7, [r1, #16]
 8003182:	2f00      	cmp	r7, #0
 8003184:	d0a9      	beq.n	80030da <__sflush_r+0x1a>
 8003186:	0793      	lsls	r3, r2, #30
 8003188:	bf18      	it	ne
 800318a:	2300      	movne	r3, #0
 800318c:	680e      	ldr	r6, [r1, #0]
 800318e:	bf08      	it	eq
 8003190:	694b      	ldreq	r3, [r1, #20]
 8003192:	eba6 0807 	sub.w	r8, r6, r7
 8003196:	600f      	str	r7, [r1, #0]
 8003198:	608b      	str	r3, [r1, #8]
 800319a:	f1b8 0f00 	cmp.w	r8, #0
 800319e:	dd9c      	ble.n	80030da <__sflush_r+0x1a>
 80031a0:	4643      	mov	r3, r8
 80031a2:	463a      	mov	r2, r7
 80031a4:	6a21      	ldr	r1, [r4, #32]
 80031a6:	4628      	mov	r0, r5
 80031a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031aa:	47b0      	blx	r6
 80031ac:	2800      	cmp	r0, #0
 80031ae:	dc06      	bgt.n	80031be <__sflush_r+0xfe>
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	e78e      	b.n	80030dc <__sflush_r+0x1c>
 80031be:	4407      	add	r7, r0
 80031c0:	eba8 0800 	sub.w	r8, r8, r0
 80031c4:	e7e9      	b.n	800319a <__sflush_r+0xda>
 80031c6:	bf00      	nop
 80031c8:	20400001 	.word	0x20400001

080031cc <_fflush_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	690b      	ldr	r3, [r1, #16]
 80031d0:	4605      	mov	r5, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	b1db      	cbz	r3, 800320e <_fflush_r+0x42>
 80031d6:	b118      	cbz	r0, 80031e0 <_fflush_r+0x14>
 80031d8:	6983      	ldr	r3, [r0, #24]
 80031da:	b90b      	cbnz	r3, 80031e0 <_fflush_r+0x14>
 80031dc:	f7fe fd76 	bl	8001ccc <__sinit>
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <_fflush_r+0x48>)
 80031e2:	429c      	cmp	r4, r3
 80031e4:	d109      	bne.n	80031fa <_fflush_r+0x2e>
 80031e6:	686c      	ldr	r4, [r5, #4]
 80031e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ec:	b17b      	cbz	r3, 800320e <_fflush_r+0x42>
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031f6:	f7ff bf63 	b.w	80030c0 <__sflush_r>
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <_fflush_r+0x4c>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d101      	bne.n	8003204 <_fflush_r+0x38>
 8003200:	68ac      	ldr	r4, [r5, #8]
 8003202:	e7f1      	b.n	80031e8 <_fflush_r+0x1c>
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <_fflush_r+0x50>)
 8003206:	429c      	cmp	r4, r3
 8003208:	bf08      	it	eq
 800320a:	68ec      	ldreq	r4, [r5, #12]
 800320c:	e7ec      	b.n	80031e8 <_fflush_r+0x1c>
 800320e:	2000      	movs	r0, #0
 8003210:	bd38      	pop	{r3, r4, r5, pc}
 8003212:	bf00      	nop
 8003214:	080035b0 	.word	0x080035b0
 8003218:	080035d0 	.word	0x080035d0
 800321c:	08003590 	.word	0x08003590

08003220 <fflush>:
 8003220:	4601      	mov	r1, r0
 8003222:	b920      	cbnz	r0, 800322e <fflush+0xe>
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <fflush+0x18>)
 8003226:	4905      	ldr	r1, [pc, #20]	; (800323c <fflush+0x1c>)
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	f7fe bdd7 	b.w	8001ddc <_fwalk_reent>
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <fflush+0x20>)
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	f7ff bfcb 	b.w	80031cc <_fflush_r>
 8003236:	bf00      	nop
 8003238:	0800358c 	.word	0x0800358c
 800323c:	080031cd 	.word	0x080031cd
 8003240:	2000000c 	.word	0x2000000c

08003244 <_lseek_r>:
 8003244:	b538      	push	{r3, r4, r5, lr}
 8003246:	4605      	mov	r5, r0
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	2200      	movs	r2, #0
 800324e:	4c05      	ldr	r4, [pc, #20]	; (8003264 <_lseek_r+0x20>)
 8003250:	6022      	str	r2, [r4, #0]
 8003252:	461a      	mov	r2, r3
 8003254:	f7fd f9aa 	bl	80005ac <_lseek>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_lseek_r+0x1e>
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	b103      	cbz	r3, 8003262 <_lseek_r+0x1e>
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000248 	.word	0x20000248

08003268 <__swhatbuf_r>:
 8003268:	b570      	push	{r4, r5, r6, lr}
 800326a:	460e      	mov	r6, r1
 800326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003270:	b096      	sub	sp, #88	; 0x58
 8003272:	2900      	cmp	r1, #0
 8003274:	4614      	mov	r4, r2
 8003276:	461d      	mov	r5, r3
 8003278:	da07      	bge.n	800328a <__swhatbuf_r+0x22>
 800327a:	2300      	movs	r3, #0
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	89b3      	ldrh	r3, [r6, #12]
 8003280:	061a      	lsls	r2, r3, #24
 8003282:	d410      	bmi.n	80032a6 <__swhatbuf_r+0x3e>
 8003284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003288:	e00e      	b.n	80032a8 <__swhatbuf_r+0x40>
 800328a:	466a      	mov	r2, sp
 800328c:	f000 f8f0 	bl	8003470 <_fstat_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	dbf2      	blt.n	800327a <__swhatbuf_r+0x12>
 8003294:	9a01      	ldr	r2, [sp, #4]
 8003296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800329a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800329e:	425a      	negs	r2, r3
 80032a0:	415a      	adcs	r2, r3
 80032a2:	602a      	str	r2, [r5, #0]
 80032a4:	e7ee      	b.n	8003284 <__swhatbuf_r+0x1c>
 80032a6:	2340      	movs	r3, #64	; 0x40
 80032a8:	2000      	movs	r0, #0
 80032aa:	6023      	str	r3, [r4, #0]
 80032ac:	b016      	add	sp, #88	; 0x58
 80032ae:	bd70      	pop	{r4, r5, r6, pc}

080032b0 <__smakebuf_r>:
 80032b0:	898b      	ldrh	r3, [r1, #12]
 80032b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b4:	079d      	lsls	r5, r3, #30
 80032b6:	4606      	mov	r6, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	d507      	bpl.n	80032cc <__smakebuf_r+0x1c>
 80032bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	2301      	movs	r3, #1
 80032c6:	6163      	str	r3, [r4, #20]
 80032c8:	b002      	add	sp, #8
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	ab01      	add	r3, sp, #4
 80032ce:	466a      	mov	r2, sp
 80032d0:	f7ff ffca 	bl	8003268 <__swhatbuf_r>
 80032d4:	9900      	ldr	r1, [sp, #0]
 80032d6:	4605      	mov	r5, r0
 80032d8:	4630      	mov	r0, r6
 80032da:	f7fe fdc1 	bl	8001e60 <_malloc_r>
 80032de:	b948      	cbnz	r0, 80032f4 <__smakebuf_r+0x44>
 80032e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e4:	059a      	lsls	r2, r3, #22
 80032e6:	d4ef      	bmi.n	80032c8 <__smakebuf_r+0x18>
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e7e3      	b.n	80032bc <__smakebuf_r+0xc>
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <__smakebuf_r+0x7c>)
 80032f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	9b00      	ldr	r3, [sp, #0]
 8003304:	6120      	str	r0, [r4, #16]
 8003306:	6163      	str	r3, [r4, #20]
 8003308:	9b01      	ldr	r3, [sp, #4]
 800330a:	b15b      	cbz	r3, 8003324 <__smakebuf_r+0x74>
 800330c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003310:	4630      	mov	r0, r6
 8003312:	f000 f8bf 	bl	8003494 <_isatty_r>
 8003316:	b128      	cbz	r0, 8003324 <__smakebuf_r+0x74>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	431d      	orrs	r5, r3
 8003328:	81a5      	strh	r5, [r4, #12]
 800332a:	e7cd      	b.n	80032c8 <__smakebuf_r+0x18>
 800332c:	08001c95 	.word	0x08001c95

08003330 <memchr>:
 8003330:	b510      	push	{r4, lr}
 8003332:	b2c9      	uxtb	r1, r1
 8003334:	4402      	add	r2, r0
 8003336:	4290      	cmp	r0, r2
 8003338:	4603      	mov	r3, r0
 800333a:	d101      	bne.n	8003340 <memchr+0x10>
 800333c:	2300      	movs	r3, #0
 800333e:	e003      	b.n	8003348 <memchr+0x18>
 8003340:	781c      	ldrb	r4, [r3, #0]
 8003342:	3001      	adds	r0, #1
 8003344:	428c      	cmp	r4, r1
 8003346:	d1f6      	bne.n	8003336 <memchr+0x6>
 8003348:	4618      	mov	r0, r3
 800334a:	bd10      	pop	{r4, pc}

0800334c <memcpy>:
 800334c:	b510      	push	{r4, lr}
 800334e:	1e43      	subs	r3, r0, #1
 8003350:	440a      	add	r2, r1
 8003352:	4291      	cmp	r1, r2
 8003354:	d100      	bne.n	8003358 <memcpy+0xc>
 8003356:	bd10      	pop	{r4, pc}
 8003358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800335c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003360:	e7f7      	b.n	8003352 <memcpy+0x6>

08003362 <__malloc_lock>:
 8003362:	4770      	bx	lr

08003364 <__malloc_unlock>:
 8003364:	4770      	bx	lr
	...

08003368 <_free_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4605      	mov	r5, r0
 800336c:	2900      	cmp	r1, #0
 800336e:	d043      	beq.n	80033f8 <_free_r+0x90>
 8003370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003374:	1f0c      	subs	r4, r1, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	bfb8      	it	lt
 800337a:	18e4      	addlt	r4, r4, r3
 800337c:	f7ff fff1 	bl	8003362 <__malloc_lock>
 8003380:	4a1e      	ldr	r2, [pc, #120]	; (80033fc <_free_r+0x94>)
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	4610      	mov	r0, r2
 8003386:	b933      	cbnz	r3, 8003396 <_free_r+0x2e>
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6014      	str	r4, [r2, #0]
 800338c:	4628      	mov	r0, r5
 800338e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003392:	f7ff bfe7 	b.w	8003364 <__malloc_unlock>
 8003396:	42a3      	cmp	r3, r4
 8003398:	d90b      	bls.n	80033b2 <_free_r+0x4a>
 800339a:	6821      	ldr	r1, [r4, #0]
 800339c:	1862      	adds	r2, r4, r1
 800339e:	4293      	cmp	r3, r2
 80033a0:	bf01      	itttt	eq
 80033a2:	681a      	ldreq	r2, [r3, #0]
 80033a4:	685b      	ldreq	r3, [r3, #4]
 80033a6:	1852      	addeq	r2, r2, r1
 80033a8:	6022      	streq	r2, [r4, #0]
 80033aa:	6063      	str	r3, [r4, #4]
 80033ac:	6004      	str	r4, [r0, #0]
 80033ae:	e7ed      	b.n	800338c <_free_r+0x24>
 80033b0:	4613      	mov	r3, r2
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	b10a      	cbz	r2, 80033ba <_free_r+0x52>
 80033b6:	42a2      	cmp	r2, r4
 80033b8:	d9fa      	bls.n	80033b0 <_free_r+0x48>
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	1858      	adds	r0, r3, r1
 80033be:	42a0      	cmp	r0, r4
 80033c0:	d10b      	bne.n	80033da <_free_r+0x72>
 80033c2:	6820      	ldr	r0, [r4, #0]
 80033c4:	4401      	add	r1, r0
 80033c6:	1858      	adds	r0, r3, r1
 80033c8:	4282      	cmp	r2, r0
 80033ca:	6019      	str	r1, [r3, #0]
 80033cc:	d1de      	bne.n	800338c <_free_r+0x24>
 80033ce:	6810      	ldr	r0, [r2, #0]
 80033d0:	6852      	ldr	r2, [r2, #4]
 80033d2:	4401      	add	r1, r0
 80033d4:	6019      	str	r1, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	e7d8      	b.n	800338c <_free_r+0x24>
 80033da:	d902      	bls.n	80033e2 <_free_r+0x7a>
 80033dc:	230c      	movs	r3, #12
 80033de:	602b      	str	r3, [r5, #0]
 80033e0:	e7d4      	b.n	800338c <_free_r+0x24>
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	1821      	adds	r1, r4, r0
 80033e6:	428a      	cmp	r2, r1
 80033e8:	bf01      	itttt	eq
 80033ea:	6811      	ldreq	r1, [r2, #0]
 80033ec:	6852      	ldreq	r2, [r2, #4]
 80033ee:	1809      	addeq	r1, r1, r0
 80033f0:	6021      	streq	r1, [r4, #0]
 80033f2:	6062      	str	r2, [r4, #4]
 80033f4:	605c      	str	r4, [r3, #4]
 80033f6:	e7c9      	b.n	800338c <_free_r+0x24>
 80033f8:	bd38      	pop	{r3, r4, r5, pc}
 80033fa:	bf00      	nop
 80033fc:	200001fc 	.word	0x200001fc

08003400 <_realloc_r>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	4607      	mov	r7, r0
 8003404:	4614      	mov	r4, r2
 8003406:	460e      	mov	r6, r1
 8003408:	b921      	cbnz	r1, 8003414 <_realloc_r+0x14>
 800340a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800340e:	4611      	mov	r1, r2
 8003410:	f7fe bd26 	b.w	8001e60 <_malloc_r>
 8003414:	b922      	cbnz	r2, 8003420 <_realloc_r+0x20>
 8003416:	f7ff ffa7 	bl	8003368 <_free_r>
 800341a:	4625      	mov	r5, r4
 800341c:	4628      	mov	r0, r5
 800341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003420:	f000 f848 	bl	80034b4 <_malloc_usable_size_r>
 8003424:	42a0      	cmp	r0, r4
 8003426:	d20f      	bcs.n	8003448 <_realloc_r+0x48>
 8003428:	4621      	mov	r1, r4
 800342a:	4638      	mov	r0, r7
 800342c:	f7fe fd18 	bl	8001e60 <_malloc_r>
 8003430:	4605      	mov	r5, r0
 8003432:	2800      	cmp	r0, #0
 8003434:	d0f2      	beq.n	800341c <_realloc_r+0x1c>
 8003436:	4631      	mov	r1, r6
 8003438:	4622      	mov	r2, r4
 800343a:	f7ff ff87 	bl	800334c <memcpy>
 800343e:	4631      	mov	r1, r6
 8003440:	4638      	mov	r0, r7
 8003442:	f7ff ff91 	bl	8003368 <_free_r>
 8003446:	e7e9      	b.n	800341c <_realloc_r+0x1c>
 8003448:	4635      	mov	r5, r6
 800344a:	e7e7      	b.n	800341c <_realloc_r+0x1c>

0800344c <_read_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4605      	mov	r5, r0
 8003450:	4608      	mov	r0, r1
 8003452:	4611      	mov	r1, r2
 8003454:	2200      	movs	r2, #0
 8003456:	4c05      	ldr	r4, [pc, #20]	; (800346c <_read_r+0x20>)
 8003458:	6022      	str	r2, [r4, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f7fc fff2 	bl	8000444 <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_read_r+0x1e>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	b103      	cbz	r3, 800346a <_read_r+0x1e>
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20000248 	.word	0x20000248

08003470 <_fstat_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	2300      	movs	r3, #0
 8003474:	4c06      	ldr	r4, [pc, #24]	; (8003490 <_fstat_r+0x20>)
 8003476:	4605      	mov	r5, r0
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	f7fd f87c 	bl	800057a <_fstat>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	d102      	bne.n	800348c <_fstat_r+0x1c>
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	b103      	cbz	r3, 800348c <_fstat_r+0x1c>
 800348a:	602b      	str	r3, [r5, #0]
 800348c:	bd38      	pop	{r3, r4, r5, pc}
 800348e:	bf00      	nop
 8003490:	20000248 	.word	0x20000248

08003494 <_isatty_r>:
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	2300      	movs	r3, #0
 8003498:	4c05      	ldr	r4, [pc, #20]	; (80034b0 <_isatty_r+0x1c>)
 800349a:	4605      	mov	r5, r0
 800349c:	4608      	mov	r0, r1
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	f7fd f87a 	bl	8000598 <_isatty>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_isatty_r+0x1a>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_isatty_r+0x1a>
 80034ac:	602b      	str	r3, [r5, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	20000248 	.word	0x20000248

080034b4 <_malloc_usable_size_r>:
 80034b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b8:	1f18      	subs	r0, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bfbc      	itt	lt
 80034be:	580b      	ldrlt	r3, [r1, r0]
 80034c0:	18c0      	addlt	r0, r0, r3
 80034c2:	4770      	bx	lr

080034c4 <_init>:
 80034c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c6:	bf00      	nop
 80034c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ca:	bc08      	pop	{r3}
 80034cc:	469e      	mov	lr, r3
 80034ce:	4770      	bx	lr

080034d0 <_fini>:
 80034d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d2:	bf00      	nop
 80034d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d6:	bc08      	pop	{r3}
 80034d8:	469e      	mov	lr, r3
 80034da:	4770      	bx	lr
